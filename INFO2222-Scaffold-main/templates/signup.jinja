<!-- 
Sign up page, pretty much the same as login.
-->

<script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.1.1/crypto-js.min.js"></script>

{% extends 'base.jinja' %}


{% block content %} 
<style>
    body {
        background-color: #f8f9fa;
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        margin: 0;
    }

    .auth-container, .login-container {
        background: #ffffff; /* Light background */
        border-radius: 10px;
        overflow: hidden;
        display: flex;
        width: 80%;
        max-width: 1200px; /* Max width */
        height: 90%; /* Height */
        box-shadow: 0 0 15px rgba(0, 0, 0, 0.1); /* Lighter shadow */
    }

    .auth-image, .login-image {
        background: url('/static/images/newimage.png') no-repeat center center;
        background-size: cover;
        width: 60%;
        position: relative;
    }

    .auth-image::before, .login-image::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0); /* Lighter overlay */
    }

    .auth-form, .login-form {
        padding: 40px;
        width: 50%;
        display: flex;
        flex-direction: column;
        justify-content: center;
        background-color: #ffffff; /* Light background */
    }

    .auth-form h2, .login-form h2 {
        margin-bottom: 20px;
        color: #333; /* Darker text color */
        text-align: center;
    }

    .form-group label {
        color: #555; /* Darker label color */
    }

    .form-control {
        background: #f8f9fa; /* Light input background */
        border: 1px solid #ccc; /* Light border */
        color: #333; /* Darker text color */
        margin-bottom: 15px;
    }

    .form-control:focus {
        background: #f8f9fa; /* Light input background */
        border: 1px solid #6200ea; /* Focus border color */
        color: #333; /* Darker text color */
        box-shadow: none;
    }

    .btn-primary {
        background-color: #6200ea;
        border: none;
        color: #fff;
        width: 100%;
        padding: 10px;
        font-size: 16px;
        margin-top: 10px;
        transition: background-color 0.3s ease;
    }

    .btn-primary:hover {
        background-color: #3700b3;
    }

    .btn-outline-secondary {
        border: none;
        background: transparent;
        color: #6200ea;
    }

    .btn-outline-secondary:hover {
        background: transparent;
        color: #bb86fc;
    }

    .nav-tabs {
        border-bottom: 1px solid #ddd; /* Light border */
        margin-bottom: 20px;
    }

    .nav-tabs .nav-link {
        color: #555; /* Darker text color */
    }

    .nav-tabs .nav-link.active {
        color: #6200ea;
        background-color: transparent;
        border-color: transparent transparent #6200ea;
    }

    .nav-tabs .nav-link:hover {
        border-color: transparent transparent #bb86fc;
    }

    .text-danger {
        color: #cf6679 !important;
    }

    .text-center a {
        color: #6200ea;
    }

    .text-center a:hover {
        color: #bb86fc;
    }

    .text-center a:focus {
        color: #bb86fc;
    }
</style>



<div class="auth-container">
    <div class="auth-image"></div>
    <div class="auth-form">
        <h2>Sign Up</h2>
        <form>
            <div class="form-group">
                <label for="username">Username</label>
                <input type="text" id="username" class="form-control" placeholder="Enter username">
                <small id="usernameHelp" class="form-text text-danger"></small>
            </div>
            <div class="form-group">
                <label for="password">Password</label>
                <div class="input-group">
                    <input type="password" id="password" class="form-control" placeholder="Enter password">
                    <div class="input-group-append">
                        <button class="btn btn-outline-secondary" type="button" id="togglePassword" onclick="togglePasswordVisibility('password', 'togglePassword')">üëÅÔ∏è</button>
                    </div>
                </div>
                <small id="passwordHelp" class="form-text text-danger"></small>
            </div>
            <button type="button" id="signupButton" class="btn btn-primary btn-block" disabled>Sign Up</button>
            <div class="text-center mt-3">
                <a href="{{ url_for('login') }}">Already have an account? Log in here</a>
            </div>
        </form>
    </div>
</div>





    <script>
        let passwordValid = false;
        let usernameValid = false;
        
        document.getElementById("password").addEventListener('input', function(event) {
            const password = event.target.value;
            passwordValid = validatePassword(password);
            document.getElementById('passwordHelp').textContent = passwordValid ? '' : 'Password must be at least 8 characters long, include uppercase, lowercase, numbers, and special characters.';
            updateSignupButtonState();
        });

        document.getElementById("username").addEventListener('input', function(event) {
            const username = event.target.value;
            usernameValid = validateUsername(username);
            document.getElementById('usernameHelp').textContent = usernameValid ? '' : 'Username cannot contain special characters from the following: !@#$%^&*(),.?":{}|<>';
            updateSignupButtonState();
        });

        function updateSignupButtonState(){
            document.getElementById('signupButton').disabled = !(usernameValid && passwordValid);
        }

        function validatePassword(password){
            const hasUpperCase = /[A-Z]/.test(password);
            const hasLowerCase = /[a-z]/.test(password);
            const hasNumbers = /\d/.test(password);
            const hasSpecialChars = /[!@#$%^&*(),.?":{}|<>]/.test(password);
            const isLongEnough = password.length >= 8;
            const notTooLong = password.length <= 20;

            return hasUpperCase && hasLowerCase && hasNumbers && hasSpecialChars && isLongEnough && notTooLong;
        }

        function validateUsername(username){
            const hasSpecialChars = /[!@#$%^&*(),.?":{}|<>]/.test(username);
            return !hasSpecialChars;
        }

        function togglePasswordVisibility(){
            const passwordInput = document.getElementById('password');
            const toggleButton = document.getElementById('togglePassword');
            const isPasswordVisible = passwordInput.type === 'text';
            passwordInput.type = isPasswordVisible ? 'password' : 'text';
            toggleButton.textContent = isPasswordVisible ? 'üëÅÔ∏è' : 'üö´';
        }

        function isValidURL(string) {
            if (string.length == 0) {
                return false;
            }
            if (string[0] == "/") {
                return true;
            }
            return false;
        }


        document.getElementById('signupButton').addEventListener('click', async () => {
            const username = $("#username").val();
            const password = $("#password").val();
            signup(username, password)

            // Generate a key pair for the user - NO LONGER USING
            // const keyPair = await generateAndStoreKeyPair();

            // Store the private key securely in local storage - NO LONGER USING
            // await storePrivateKeyLocally(username, keyPair.privateKey);
            // logPrivateKeyForTesting(username); FOR TESTING

            // sign up - NO LONGER USING
            // signup(username, password, keyPair.publicKey)
        });

        async function signup(username, password){
            let signupButton = document.getElementById('signupButton');
            signupButton.disabled = true; // disables button, prevents multiple submissions
            let loginURL = "{{ url_for('signup_user') }}";

            // hash password
            let hashedPassword = CryptoJS.SHA256(password).toString();
            let res = await axios.post(loginURL, {
                username: username,
                password: hashedPassword        
            });
            if (!isValidURL(res.data)) {
                alert(res.data);
                signupButton.disabled = false; // re-enable button is signup fails
                return;
            }
            window.open(res.data, "_self");
        }

    </script>
{% endblock %}
