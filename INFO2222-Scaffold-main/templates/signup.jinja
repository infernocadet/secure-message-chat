<!-- 
Sign up page, pretty much the same as login.
-->

<script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.1.1/crypto-js.min.js"></script>

{% extends 'base.jinja' %}

{% block content %} 
    <h1>Sign Up</h1>
    <p>Username</p>
    <input id="username"/>
    <p>Password</p>
    <div style="position: relative;">
        <input id="password" type="password" style="padding-right: 30px;"/>
        <button id="togglePassword" style="position: relative; right: 0; top: 0;" onclick="togglePasswordVisibility()">üëÅÔ∏è</button>
    </div>
    <p id="passwordHelp" style="color: red;"></p>
    <button id="signupButton" disabled>Sign up</button>

    <script>
        
        document.getElementById("password").addEventListener('input', function(event) {
            const password = event.target.value;
            passwordValid = validatePassword(password);
            document.getElementById('passwordHelp').textContent = passwordValid ? '' : 'Password must be at least 8 characters long, include uppercase, lowercase, numbers, and special characters.';
            document.getElementById('signupButton').disabled = !passwordValid;
        });

        function validatePassword(password){
            const hasUpperCase = /[A-Z]/.test(password);
            const hasLowerCase = /[a-z]/.test(password);
            const hasNumbers = /\d/.test(password);
            const hasSpecialChars = /[!@#$%^&*(),.?":{}|<>]/.test(password);
            const isLongEnough = password.length >= 8;
            const notTooLong = password.length <= 20;

            return hasUpperCase && hasLowerCase && hasNumbers && hasSpecialChars && isLongEnough && notTooLong;
        }

        function togglePasswordVisibility(){
            const passwordInput = document.getElementById('password');
            const toggleButton = document.getElementById('togglePassword');
            const isPasswordVisible = passwordInput.type === 'text';
            passwordInput.type = isPasswordVisible ? 'password' : 'text';
            toggleButton.textContent = isPasswordVisible ? 'üëÅÔ∏è' : 'üö´';
        }

        function isValidURL(string) {
            if (string.length == 0) {
                return false;
            }
            if (string[0] == "/") {
                return true;
            }
            return false;
        }

        async function generateAndStoreKeyPair(){

            const keyPair = await window.crypto.subtle.generateKey(
                {
                    name: "RSA-OAEP",
                    modulusLength: 2048,
                    publicExponent: new Uint8Array([1, 0, 1]),
                    hash: "SHA-256"
                },
                true, // whether the key is extractable (i.e., can be taken out of the web crypto API)
                ["encrypt", "decrypt"] // key usages
            );


            // export public key in a format which can be sent to server
            const exportedPublicKey = await window.crypto.subtle.exportKey(
                "spki",
                keyPair.publicKey
            );

            // convert to base64 so it can be sent in a JSON object
            const publicKeyBase64 = btoa(String.fromCharCode(...new Uint8Array(exportedPublicKey)));

            return {publicKey: publicKeyBase64, privateKey: keyPair.privateKey};
        }

        async function storePrivateKeyLocally(username, privateKey){
            try {
                const key = await window.crypto.subtle.exportKey('jwk', privateKey);
                const keyString = JSON.stringify(key);
                let address = 'privateKey_' + username;
                localStorage.setItem(address, keyString);
                console.log("stored private key at " + address + ":", keyString);
            } catch (err){
                console.error("Error exporting key:", err);
            }
        }

        function logPrivateKeyForTesting(username){
            let address = 'privateKey_' + username;
            const privateKeyString = localStorage.getItem(address);
            console.log("Trying to find private key at: ", address);
            if (privateKeyString){
                console.log("(Signup)Private key:", username, privateKeyString);
            } else {
                console.log("(Signup)No private key stored")
            }
        }

        document.getElementById('signupButton').addEventListener('click', async () => {
            const username = $("#username").val();
            const password = $("#password").val();

            // Generate a key pair for the user
            const keyPair = await generateAndStoreKeyPair();

            // Store the private key securely in local storage
            await storePrivateKeyLocally(username, keyPair.privateKey);
            logPrivateKeyForTesting(username);

            // sign up
            signup(username, password, keyPair.publicKey)

        })
        

        async function signup(username, password, publicKey) {
            let signupButton = document.getElementById('signupButton');
            signupButton.disabled = true; // disables button, prevents multiple submissions
            let loginURL = "{{ url_for('signup_user') }}";

            // Hash password 
            let hashedPassword = CryptoJS.SHA256(password).toString();

            console.log("Sending data:", { username, password: hashedPassword, publicKey });

            let res = await axios.post(loginURL, {
                username: username,
                password: hashedPassword,
                publicKey: publicKey
            });
            if (!isValidURL(res.data)) {
                alert(res.data);
                signupButton.disabled = false; // re-enable button is signup fails
                return;
            }
            window.open(res.data, "_self");
        }

    </script>
{% endblock %}
