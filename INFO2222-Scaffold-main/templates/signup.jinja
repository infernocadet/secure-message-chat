<!-- 
Sign up page, pretty much the same as login.
-->

<script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.1.1/crypto-js.min.js"></script>

{% extends 'base.jinja' %}


{% block content %} 

    
    <h1>Sign Up</h1>
    <p>Username</p>
    <input id="username"/>
    <p id="usernameHelp" style="color: red;"></p>
    <p>Password</p>
    <div style="position: relative;">
        <input id="password" type="password" style="padding-right: 30px;"/>
        <button id="togglePassword" style="position: relative; right: 0; top: 0;" onclick="togglePasswordVisibility()">üëÅÔ∏è</button>
    </div>
    <p id="passwordHelp" style="color: red;"></p>
    <button id="signupButton" disabled>Sign up</button>
    <div>
        <a href="{{ url_for('login') }}">Already have an account? Log in here</a>
    </div>

    {# DEPRECATED ENCRYPTION FUNCTIONS #}
    {# <script src="/static/js/signup/signup-indexeddb.js"></script> #}
    {# <script src="/static/js/signup/signup-keypairgeneration.js"></script> #}
    {# <script src="/static/js/signup/signup-signup.js"></script> #}

    <script>
        let passwordValid = false;
        let usernameValid = false;
        
        document.getElementById("password").addEventListener('input', function(event) {
            const password = event.target.value;
            passwordValid = validatePassword(password);
            document.getElementById('passwordHelp').textContent = passwordValid ? '' : 'Password must be at least 8 characters long, include uppercase, lowercase, numbers, and special characters.';
            updateSignupButtonState();
        });

        document.getElementById("username").addEventListener('input', function(event) {
            const username = event.target.value;
            usernameValid = validateUsername(username);
            document.getElementById('usernameHelp').textContent = usernameValid ? '' : 'Username cannot contain special characters from the following: !@#$%^&*(),.?":{}|<>';
            updateSignupButtonState();
        });

        function updateSignupButtonState(){
            document.getElementById('signupButton').disabled = !(usernameValid && passwordValid);
        }

        function validatePassword(password){
            const hasUpperCase = /[A-Z]/.test(password);
            const hasLowerCase = /[a-z]/.test(password);
            const hasNumbers = /\d/.test(password);
            const hasSpecialChars = /[!@#$%^&*(),.?":{}|<>]/.test(password);
            const isLongEnough = password.length >= 8;
            const notTooLong = password.length <= 20;

            return hasUpperCase && hasLowerCase && hasNumbers && hasSpecialChars && isLongEnough && notTooLong;
        }

        function validateUsername(username){
            const hasSpecialChars = /[!@#$%^&*(),.?":{}|<>]/.test(username);
            return !hasSpecialChars;
        }

        function togglePasswordVisibility(){
            const passwordInput = document.getElementById('password');
            const toggleButton = document.getElementById('togglePassword');
            const isPasswordVisible = passwordInput.type === 'text';
            passwordInput.type = isPasswordVisible ? 'password' : 'text';
            toggleButton.textContent = isPasswordVisible ? 'üëÅÔ∏è' : 'üö´';
        }

        function isValidURL(string) {
            if (string.length == 0) {
                return false;
            }
            if (string[0] == "/") {
                return true;
            }
            return false;
        }


        document.getElementById('signupButton').addEventListener('click', async () => {
            const username = $("#username").val();
            const password = $("#password").val();
            signup(username, password)

            // Generate a key pair for the user - NO LONGER USING
            // const keyPair = await generateAndStoreKeyPair();

            // Store the private key securely in local storage - NO LONGER USING
            // await storePrivateKeyLocally(username, keyPair.privateKey);
            // logPrivateKeyForTesting(username); FOR TESTING

            // sign up - NO LONGER USING
            // signup(username, password, keyPair.publicKey)
        });

        async function signup(username, password){
            let signupButton = document.getElementById('signupButton');
            signupButton.disabled = true; // disables button, prevents multiple submissions
            let loginURL = "{{ url_for('signup_user') }}";

            // hash password
            let hashedPassword = CryptoJS.SHA256(password).toString();
            let res = await axios.post(loginURL, {
                username: username,
                password: hashedPassword        
            });
            if (!isValidURL(res.data)) {
                alert(res.data);
                signupButton.disabled = false; // re-enable button is signup fails
                return;
            }
            window.open(res.data, "_self");
        }

    </script>
{% endblock %}
