<!-- 
    Login page, user is redirected here when the user clicks on Login.
-->

<script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.1.1/crypto-js.min.js"></script>

{% extends 'base.jinja' %}

{% block content %} 
    <h1>Login</h1>
    <p>Username</p>
    <input id="username"/>
    <p>Password</p>
    <input id="password"  type="password"/>
    <button id="togglePassword" onclick="togglePasswordVisibility()">üëÅÔ∏è</button>
    <button onclick="login()">Login</button>
    <p id="loginMessage" style="display: none;"></p>

    <script>

        {# let db;

        // Open connection to the IndexedDB
        function openDB() {
            return new Promise((resolve, reject) => {
                const request = indexedDB.open("CryptoKeys", 1);

                request.onerror = function(event) {
                    console.error("Database error: " + event.target.errorCode);
                    reject("Failed to open DB");
                };

                request.onsuccess = function(event) {
                    db = event.target.result;
                    resolve(db);
                };

                request.onupgradeneeded = function(event) {
                    const db = event.target.result;
                    if (!db.objectStoreNames.contains("PrivateKeyStore")) {
                        db.createObjectStore("PrivateKeyStore", { keyPath: "id" });
                    }
                };
            });
        }

        // Retrieve private key for a username
        async function getPrivateKey(username) {
            return new Promise((resolve, reject) => {
                const transaction = db.transaction(["PrivateKeyStore"], "readonly");
                const store = transaction.objectStore("PrivateKeyStore");
                const request = store.get(username);

                request.onsuccess = () => {
                    if (request.result) {
                        console.log("(Login)Private key:", username, request.result.key);
                        resolve(request.result.key);
                    } else {
                        console.log("(Login)No private key stored");
                        resolve(null);
                    }
                };

                request.onerror = () => {
                    console.error("Error fetching private key from IndexedDB.");
                    reject("Failed to retrieve key");
                };
            });
        } #}

        // basically checks if the server returns an Error message instead of a URL
        // this is a pretty terrible way of handling error generated by the server, but it works...
        function isValidURL(string) {
            if (string.length == 0) {
                return false;
            }
            if (string[0] == "/") {
                return true;
            }
            return false;
        }

        function togglePasswordVisibility() {
                const passwordInput = document.getElementById('password');
                const toggleButton = document.getElementById('togglePassword');
                const isPasswordVisible = passwordInput.type === 'text';
                passwordInput.type = isPasswordVisible ? 'password' : 'text';
                toggleButton.textContent = isPasswordVisible ? 'üëÅÔ∏è' : 'üö´';
            }

        // async function to login the user when user clicks on login button
        async function login() {
            // URL for the login_user function in the server
            let loginURL = "{{ url_for('login_user') }}";
            let username = $("#username").val();
            let password = $("#password").val();
            let hashedPassword = CryptoJS.SHA256(password).toString();

            {# await openDB();
            const privateKey = await getPrivateKey(username); #}

            let res = await axios.post(loginURL, {
                username: username, // using jQuery to select HTML element with id=username. .val() gets the value of that input field
                password: hashedPassword
            })
            .then(function (response){
                // if successful, we redirect the user to the URL returned by the server
                // window.open(res.data, "_self")
                
                window.location.href = response.data;
            })
            .catch(function (error) {
                console.error('Error:', error)

                // check error response from server
                if (error.response && error.response.data) {
                    // display error message
                    document.getElementById('loginMessage').textContent = error.response.data.error;
                } else {
                    // display generic error message
                    document.getElementById('loginMessage').textContent = "An error occurred";
                }
                 document.getElementById('loginMessage').style.display = "block";
            });
        }

    </script>
{% endblock %}
