<!-- 
    Here you'll find the main exhibit: the chat application code. Feel free to look around!
-->
{% extends 'base.jinja' %}

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
{% block content %} 
<style>
    body {
        display: flex;
        min-height: 100vh;
        flex-direction: column;
    }

    nav {
        border-bottom: 1px solid #ddd;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        background: #FFF;
        z-index: 2;
    }

    nav ul {
        margin: 0;
        padding: 0;
        list-style-type: none;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    nav li {
        padding: 10px 20px;
    }

    .nav-left {
        display: flex;
        align-items: center;
    }

    .nav-right {
        display: flex;
        align-items: center;
    }

    .nav-right button {
        margin-left: 10px;
    }

    .profile-link {
        display: flex;
        align-items: center;
        text-decoration: none;
        color: inherit;
    }

    .profile-icon {
        font-size: 30px;
        margin-right: 10px;
    }

    #content-wrapper {
        display: flex;
        flex: 1;
        margin-top: 80px; /* Adjusted for better spacing */
        padding: 20px;
    }

    #main-content {
        flex: 1;
        margin-right: 20px;
    }

    #message_box {
        border: 1px solid #ddd;
        height: 400px;
        overflow: auto;
        padding: 10px;
        margin-bottom: 20px;
        background-color: #fff;
    }

    .text {
        margin-top: 2px;
        margin-bottom: 2px;
    }

    #sidebar {
        width: 300px; /* Increased width for better spacing */
        background-color: #f8f9fa;
        padding-top: 10px;
        position: sticky;
        top: 80px; /* Adjusted for better spacing */
        height: calc(100vh - 80px);
        overflow-y: auto;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    aside {
        border-bottom: 1px solid #ddd;
        padding: 10px;
    }

    aside h2 {
        margin-top: 0;
        font-size: 18px;
        display: flex;
        align-items: center;
    }

    #friendsSection h2::before {
        content: 'ðŸ‘¥'; 
        margin-right: 8px;
    }

    #incomingRequestsSection h2::before {
        content: 'ðŸ“¨'; 
        margin-right: 8px;
    }

    #sentRequestsSection h2::before {
        content: 'ðŸ“¤'; 
        margin-right: 8px;
    }

    #roomsSection h2::before {
        content: 'ðŸ’¬'; 
        margin-right: 8px;
    }

    #friendsList li,
    #roomsList li {
        cursor: pointer;
        padding: 5px 10px;
        transition: background-color 0.3s, color 0.3s;
        list-style: none;
    }

    #friendsList li:hover,
    #roomsList li:hover {
        background-color: #e9ecef;
        color: #333;
    }

    #friendsList li:active,
    #roomsList li:active {
        background-color: #ccc;
        color: #000;
    }

    .status-indicator {
        display: inline-block;
        width: 10px;
        height: 10px;
        border-radius: 50%;
        margin-left: 5px;
    }
    .role-display {
        font-style: italic;
        color: gray;
        margin-left: 8px;
    }

  .online {
      background-color: green;
  }

  .offline {
      background-color: red;
  }

    .edit-mode .friend-item:hover {
        text-decoration: line-through;
    }

    .modal-body .form-group {
        margin-bottom: 1rem;
    }

    .form-check {
        margin-bottom: 0.5rem;
    }

    #add-friend-section {
        margin-top: 20px;
        background-color: #f8f9fa;
        padding: 20px;
        border: 1px solid #ddd;
        border-radius: 5px;
    }

    .btn {
        padding: 8px 12px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }

    .btn-primary {
        background-color: #007bff;
        color: #fff;
    }

    .btn-secondary {
        background-color: #6c757d;
        color: #fff;
    }

    .btn-outline-danger {
        border: 1px solid #dc3545;
        color: #dc3545;
        background-color: #fff;
    }

    .btn:hover {
        opacity: 0.8;
    }
</style>
<!-- Modal HTML -->
<div
  class="modal fade"
  id="removeFriendModal"
  tabindex="-1"
  role="dialog"
  aria-labelledby="removeFriendModalLabel"
  aria-hidden="true"
>
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="removeFriendModalLabel">Remove Friend</h5>
        <button
          type="button"
          class="close"
          data-dismiss="modal"
          aria-label="Close"
        >
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        Are you sure you want to remove <span id="friendName"></span> as a
        friend?
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal">
          No
        </button>
        <button type="button" class="btn btn-primary" id="confirmRemoveButton">
          Yes
        </button>
      </div>
    </div>
  </div>
</div>

<!-- New Chat Modal -->
<div class="modal fade" id="newChatModal" tabindex="-1" role="dialog" aria-labelledby="newChatModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="newChatModalLabel">Start a New Chat</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="newChatForm">
                    <div class="form-group">
                        <label for="chatRoomName">Chat Room Name:</label>
                        <input type="text" class="form-control" id="chatRoomName" placeholder="Enter room name">
                    </div>
                    <div class="form-group">
                        <label>Select friends to chat with:</label>
                        <div id="friendsCheckboxList">
                            {% for item in friends %}
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" value="{{ item.username }}" id="friend-{{ item.username }}">
                                    <label class="form-check-label" for="friend-{{ item.username }}">
                                        {{ item.username }}
                                    </label>
                                </div>
                            {% endfor %}
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="createChat()">Start Chat</button>
            </div>
        </div>
    </div>
</div>

<!-- New Chat Modal -->
<div class="modal fade" id="newChatModal" tabindex="-1" role="dialog" aria-labelledby="newChatModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="newChatModalLabel">Start a New Chat</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="newChatForm">
                    <div class="form-group">
                        <label for="chatRoomName">Chat Room Name:</label>
                        <input type="text" class="form-control" id="chatRoomName" placeholder="Enter room name">
                    </div>
                    <div class="form-group">
                        <label>Select friends to chat with:</label>
                        <div id="friendsCheckboxList">
                            {% for item in friends %}
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" value="{{ item.username }}" id="friend-{{ item.username }}">
                                    <label class="form-check-label" for="friend-{{ item.username }}">
                                        {{ item.username }}
                                    </label>
                                </div>
                            {% endfor %}
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="createChat()">Start Chat</button>
            </div>
        </div>
    </div>
</div>

<nav>
    <ul>
        <div class="nav-left">
            <li>
                <a href="{{ url_for('profile') }}" class="profile-link">
                    <i class="fas fa-user-circle profile-icon"></i>
                    <span><strong>{{ username }}</strong></span>
                </a>
            </li>
        </div>
        <div class="nav-right">
            <li><button class="btn btn-outline-danger" onclick="logout()">Logout</button></li>
            <li><button class="btn btn-secondary" onclick="toggleEditMode()">Edit Friends</button></li>
            <li><button class="btn btn-primary" onclick="showNewChatModal()">New Chat</button></li>
            <li><button class="btn btn-info" onclick="window.location.href='{{ url_for('todo') }}'">To-Do List</button></li>
        </div>
    </ul>
</nav>
<div id="content-wrapper">
    <div id="main-content">
        <h1 id="page-title">Join a chat!</h1>

        <section id="message_box"></section>

        <section id="input_box" style="display: none;">
            <input id="message" placeholder="message">
            <button class="btn btn-primary" onclick="send()">Send</button>
            <button class="btn btn-secondary" onclick="leave()">Leave Room</button>
        </section>

        <section id="add-friend-section">
            <h1>Add friend</h1>
            <form id="friendrequestForm">
                <label for="friendUsername">Friend's Username:</label>
                <input id="friendUsername" name="friendUsername" type="text" required />
                <button type="submit" class="btn btn-primary">Add Friend</button>
            </form>
            <p id="friendRequestMessage" style="display:none;"></p>
        </section>
    </div>

    <div id="sidebar">
      <!-- Friends Section -->
      <aside id="friendsSection">
        <h2>Friends</h2>
        <div id="friendsContent">
          {% if friends %}
          <ul id="friendsList">
            {% for item in friends %}
            <li
          id="friend-{{ item.username }}"
          class="friend-item"
          onclick="handleFriendClick('{{ item.username }}')"
            >
          {{ item.username }} <span class="role-display">{{ get_role_display(item.role) }}</span>
          <span
            id="status-{{ item.username }}"
            class="status-indicator offline"
          ></span>
            </li>
            {% endfor %}
          </ul>
          {% else %}
          <p id="lonelyMessage">It's a bit lonely in here...</p>
          {% endif %}
        </div>
      </aside>

        <!-- Incoming Requests Section -->
        <aside id="incomingRequestsSection">
            <h2>Incoming Requests</h2>
            <div id="incomingFriendsContent">
                <ul id="incomingRequestsList">
                    {% for item in incoming_friends %}
                        <li id="friend-request-{{ item.id }}">
                            {{ item.sender_username }}
                            <button class="btn btn-primary" onclick="acceptfriendRequest('{{ item.id }}', this)">Accept</button>
                            <button class="btn btn-secondary" onclick="rejectfriendRequest('{{ item.id }}', this)">Reject</button>
                            <p id="requestResponse" style="display:none;"></p>
                        </li>
                    {% endfor %}
                </ul>
                {% if not incoming_friends %}
                    <p id="noIncomingRequestsMessage">No incoming requests. (tumbleweed)</p>
                {% endif %}
            </div>
        </aside>

        <!-- Sent Requests Section -->
        <aside id="sentRequestsSection">
            <h2>Sent Requests</h2>
            <div id="sentRequestsContent">
                {% if sent_requests %}
                    <ul id="sentRequestsList">
                        {% for sent in sent_requests %}
                            <li id="sent-request-{{ sent.id }}">
                                {{ sent.receiver_username }}
                            </li>
                        {% endfor %}
                    </ul>
                {% else %}
                    <p id="noSentRequestsMessage">No sent requests. Go and add someone!</p>
                {% endif %}
            </div>
        </aside>

        <!-- Rooms Section -->
        <aside id="roomsSection">
            <h2>Rooms</h2>
            <div id="roomsContent">
                {% if rooms %}
                    <ul id="roomsList">
                        {% for room in rooms %}
                            <li id="room-{{ room.id }}" class="room-item" onclick="joinRoom({{ room.id }}, '{{ room.name }}')">
                                {{ room.name }}
                            </li>
                        {% endfor %}
                    </ul>
                {% else %}
                    <p id="noRoomsMessage">No rooms available.</p>
                {% endif %}
            </div>
        </aside>
    </div>
</div>



<script src="/static/js/libs/socket.io.min.js"></script>
<script src="/static/js/home/friends-list.js"></script>
{# old encryption scripts #}
{# <script src="/static/js/home-encryption/everything-encryption.js"></script> #}
<script>
  let room_id = 0;
  let friendsList = [];

  // when the user presses the "Enter" key inside of the "message box",
  // the message is sent to the server
  $("#message").on("keyup", (e) => {
    if (e.key == "Enter") {
      send();
    }
  });

  $(document).ready(() => {
    // room_id is undefined if the user hasn't joined a room
    // we early return in this case
    if (Cookies.get("room_id") == undefined) {
      return;
    }

    // the user has already joined an existing room
    // we'll display the message box, instead of the "Chat with: " box
    $("#chat_box").hide();
    $("#input_box").show();
    room_id = parseInt(Cookies.get("room_id"));
    console.log(room_id);
  });

  // Here's the Socket IO part of the code
  // things get a bit complicated here so brace yourselves :P
  let username = "{{ username }}";

  Cookies.set("username", username);

  // initializes the socket
  const socket = io();

  // show that the user is online
  socket.emit("online", username);
  console.log(username + " is online");

    // an incoming message arrives, we'll add the message to the message box
    socket.on("incoming", (msg, color="black") => {
        add_message(msg, color);
    })

        

    // we'll send the message to the server by emitting a "send" event
    async function send() {
        let message = $("#message").val();
        $("#message").val("");
        if (message.trim() === "") return; // Prevent sending empty messages
        socket.emit("send", username, message, room_id);  
    } 

    // Function to leave the room
    function leave() {
        Cookies.remove("room_id");
        socket.emit("leave", username, room_id);
        updatePageTitle("Join a chat")
        $("#input_box").hide();
        $("#chat_box").show();
    }

    socket.on("message_history", function(messages) {
        messages.forEach(message => {
            add_message(`${message.sender}: ${message.content}`, "black");
        });
    });

    // function to add a message to the message box
    function add_message(message, color) {
        let box = $("#message_box");
        let child = $(`<p style="color:${color}; margin: 0px;"></p>`).text(message);
        box.append(child);
    }

    // Function to show the New Chat modal
    function showNewChatModal() {
        $('#newChatModal').modal('show');
    }
    
    socket.on("new_room", function(data) {
        const roomId = data.room_id;
        const roomName = data.room_name;
        const roomItem = `<li id="room-${roomId}" class="room-item" onclick="joinRoom(${roomId}, '${roomName}')">${roomName}</li>`;
        $('#roomsList').append(roomItem);
    });


    // function to create new chat
    function createChat() {
        let selectedFriends = [];
        $('#friendsCheckboxList input:checked').each(function() {
            selectedFriends.push($(this).val());
        });

        let chatRoomName = $('#chatRoomName').val().trim();
        if (!chatRoomName) {
            chatRoomName = "Chat Room";
        }
        
        if (selectedFriends.length === 0) {
            alert("Please select at least one friend.");
            return;
        }
        socket.emit("create", {sender: username, room_name: chatRoomName, friends: selectedFriends}, (res) => {
            if (typeof res != "number") {
                alert(res);
                return;
            }
            room_id = res;
            Cookies.set("room_id", room_id);
            $('#newChatModal').modal('hide');
            $("#chat_box").hide();
            $("#input_box").show();
        });
    }
    // Function to update the page title
    function updatePageTitle(title) {
        document.getElementById('page-title').textContent = title;
    }

    function joinRoom(roomId, roomName) {
        const senderName = "{{ username }}";  // Ensure sender name is included
        console.log(roomId, roomName);
        // Emit a join event to the server with the roomId and senderName
        socket.emit("join", { sender_name: senderName, room_id: roomId }, (res) => {
            // Check if the response is successful
            if (!res.success) {
                alert(res.message);
                return;
            }
            room_id = res.room_id;
            Cookies.set("room_id", room_id);
            updatePageTitle(roomName);
            $("#chat_box").hide();
            $("#input_box").show();
        });
    }


  // handling friend online status update
  socket.on("friend_online", function (data) {
    let friendUsername = data.username;
    let statusIndicator = document.getElementById("status-" + friendUsername);
    if (statusIndicator) {
      statusIndicator.classList.remove("offline");
      statusIndicator.classList.add("online");
    }
  });

  // handling friend offline status update
  socket.on("friend_offline", function (data) {
    let friendUsername = data.username;
    let statusIndicator = document.getElementById("status-" + friendUsername);
    if (statusIndicator) {
      statusIndicator.classList.remove("online");
      statusIndicator.classList.add("offline");
    }
  });

  // handling friend removal in edit mode
  let editMode = false;
  let friendToRemove = "";

  function toggleEditMode() {
    editMode = !editMode;
    const editButton = document.querySelector(
      'button[onclick="toggleEditMode()"]'
    );
    const friendsList = document.getElementById("friendsList");

    if (editMode) {
      editButton.textContent = "Done";
      friendsList.classList.add("edit-mode");
      toggleFriendList(true);
    } else {
      editButton.textContent = "Edit Friends";
      friendsList.classList.remove("edit-mode");
      toggleFriendList(false);
    }
  }

  function toggleFriendList(editMode) {
    const friendsList = document.getElementById("friendsList");
    const friends = friendsList.getElementsByTagName("li");

    for (let friend of friends) {
      if (editMode) {
        // In edit mode: remove status indicator and change click behavior
        const statusIndicator = friend.querySelector(".status-indicator");
        if (statusIndicator) {
          statusIndicator.remove();
        }
        friend.onclick = () => showRemoveFriendModal(friend.id.split("-")[1]);
      } else {
        // In normal mode: restore status indicator and change click behavior back to chat
        const username = friend.id.split("-")[1];
        const statusIndicator = document.createElement("span");
        statusIndicator.id = `status-${username}`;
        statusIndicator.className = "status-indicator offline";
        friend.appendChild(statusIndicator);
        friend.onclick = () => click_join(username);
      }
    }
  }

  function showRemoveFriendModal(friendUsername) {
    friendToRemove = friendUsername;
    document.getElementById("friendName").textContent = friendUsername;
    $("#removeFriendModal").modal("show");
  }

  document
    .getElementById("confirmRemoveButton")
    .addEventListener("click", function () {
      removeFriend(friendToRemove);
      $("#removeFriendModal").modal("hide");
    });

    function handleFriendClick(friendUsername){
        if (editMode){
            showRemoveFriendModal(friendUsername);
        }; // opportunity here to click and open profile
    }

  // adding friend function
  document
    .getElementById("friendrequestForm")
    .addEventListener("submit", function (event) {
      event.preventDefault(); // prevent form from submitting the traditional way

      let friendUsername = document.getElementById("friendUsername").value;
      let currentUsername = "{{ username }}";

      // add in error handling to prevent users from adding themselves
      if (friendUsername == currentUsername) {
        document.getElementById("friendRequestMessage").textContent =
          "Can't add yourself!";
        document.getElementById("friendRequestMessage").style.display = "block";
        return new Error("Error message");
      }

      // construct url for the post event
      let addFriendURL = "{{ url_for('add_friend') }}";

      // use axios to send post request
      axios
        .post(addFriendURL, {
          current_user: currentUsername,
          friend_user: friendUsername,
        })
        .then(function (response) {
          console.log(response.data);
          document.getElementById("friendRequestMessage").textContent =
            "Friend request sent!";
          document.getElementById("friendRequestMessage").style.display =
            "block";
        })
        .catch(function (error) {
          console.error("Error:", error);

          // check if error response contains data
          if (error.response && error.response.data) {
            // display error message
            document.getElementById("friendRequestMessage").textContent =
              error.response.data.error;
          } else {
            document.getElementById("friendRequestMessage").textContent =
              "An error occurred while sending the friend request.";
          }
          document.getElementById("friendRequestMessage").style.display =
            "block";
        });
    });

  // function to accept a friend request
  function acceptfriendRequest(requestID, element) {
    let acceptURL = "{{ url_for('accept_friend_request') }}";
    axios
      .post(acceptURL, {
        request_id: requestID,
      })
      .then(function (response) {
        // check if response contains an error
        if (response.data.error) {
          // display error
          document.getElementById("requestResponse").textContent =
            response.data.error;
          document.getElementById("requestResponse").style.display = "block";
        } else {
          // on success, remove request from list
          element.closest("li").remove();

          // check if any more friend requests
          let incomingRequestsList = document.getElementById(
            "incomingRequestsList"
          );
          if (
            incomingRequestsList &&
            incomingRequestsList.children.length === 0
          ) {
            // if none, display no incoming requests
            noIncomingRequestsMessage.style.display = "block";
          }

          // success message
          console.log(response.data);
          document.getElementById("requestResponse").textContent =
            "You accepted the request!";
          document.getElementById("requestResponse").style.display = "block";
        }
      })
      .catch(function (error) {
        console.error("Error:", error);
        document.getElementById("requestResponse").textContent = error;
        document.getElementById("requestResponse").style.display = "block";
      });
  }

  // function to reject a friend request
  function rejectfriendRequest(requestID, element) {
    let rejectURL = "{{ url_for('reject_friend_request') }}";
    axios
      .post(rejectURL, {
        request_id: requestID,
      })
      .then(function (response) {
        // on success, remove friend request from UI
        element.closest("li").remove();

        // check if any more friend requests
        let incomingRequestsList = document.getElementById(
          "incomingRequestsList"
        );
        if (
          incomingRequestsList &&
          incomingRequestsList.children.length === 0
        ) {
          // if none, display no incoming requests
          noIncomingRequestsMessage.style.display = "block";
        }

        console.log(response.data);
        document.getElementById("requestResponse").textContent =
          "You rejected the request!";
        document.getElementById("requestResponse").style.display = "block";
      })
      .catch(function (error) {
        console.error("Error:", error);
        document.getElementById("requestResponse").textContent = "reject error";
        document.getElementById("requestResponse").style.display = "block";
      });
  }

  function removeFriend(friendUsername) {
    let removeFriendURL = "{{ url_for('remove_friend') }}";

        axios.post(removeFriendURL, {
            friend_username: friendUsername
        })
        .then(function(response) {
            console.log(response.data);
            if (response.data.success) {
                // Remove friend from the list
                let friendElement = document.getElementById('friend-' + friendUsername);
                if (friendElement) {
                    friendElement.remove();
                }
            } else {
                console.error(response.data.error);
            }
        })
        .catch(function(error) {
            console.error('Error:', error);
        });
    };
    // update friends list when a new friend is added
    socket.on("update_friends_list", function(data) {
        if (data.new_friend) {
            let newFriendUsername = data.new_friend;
            let friendsList = document.getElementById('friendsList');
            let friendsSection = document.getElementById('friendsSection');
            let lonelyMessage = document.getElementById('lonelyMessage');

      if (!friendsList) {
        if (lonelyMessage) {
          lonelyMessage.remove();
        }
        friendsList = document.createElement("ul");
        friendsList.id = "friendsList";
        friendsSection.appendChild(friendsList);
      }

      let newFriendItem = document.createElement("li");
      newFriendItem.id = "friend-" + newFriendUsername;
      newFriendItem.classList.add("friend-item");
      newFriendItem.setAttribute(
        "onclick",
        `handleFriendClick('${newFriendUsername}')`
      );
      let usernameText = document.createTextNode(newFriendUsername + " ");
      newFriendItem.appendChild(usernameText);

      if (!editMode) {
        let statusIndicator = document.createElement("span");
        statusIndicator.id = "status-" + newFriendUsername;
        statusIndicator.className = "status-indicator offline";
        newFriendItem.appendChild(statusIndicator);
      }

      friendsList.appendChild(newFriendItem);
    } else if (data.removed_friend) {
      let removedFriendUsername = data.removed_friend;
      let friendElement = document.getElementById(
        "friend-" + removedFriendUsername
      );
      if (friendElement) {
        friendElement.remove();
      }
    }
    socket.emit("online", username);
  });

  // update friend requests list when a friend request is received
  socket.on("update_friend_requests", function (data) {
    // backend sends username of new friend
    let newFriendUsername = data.new_friend;

    // retrieve request ID of the particular friend request
    let requestID = data.request_id;

    // get all current friend request list elements
    let incomingRequestsList = document.getElementById("incomingRequestsList");
    let incomingRequestsSection = document.getElementById(
      "incomingRequestsSection"
    );
    let noIncomingRequestsMessage = document.getElementById(
      "noIncomingRequestsMessage"
    );

    // remove noIncomingRequests message if exists
    if (noIncomingRequestsMessage) {
      noIncomingRequestsMessage.style.display = "none";
    }

    // create incoming request list if doesnt exist
    if (!incomingRequestsList) {
      incomingRequestsList = document.createElement("ul");
      incomingRequestsList.id = "incomingRequestsList";
      incomingRequestsSection.appendChild(incomingRequestsList);
    }

    // create list item for the new friend request
    let requestItem = document.createElement("li");
    requestItem.id = "friend-request-" + requestID;

    // create text node for the username
    let usernameText = document.createTextNode(newFriendUsername);
    requestItem.appendChild(usernameText);

    // create accept button
    let acceptButton = document.createElement("button");
    acceptButton.textContent = "Accept";
    acceptButton.onclick = function () {
      acceptfriendRequest(requestID, this);
    };
    requestItem.appendChild(acceptButton);

    // create reject button
    let rejectButton = document.createElement("button");
    rejectButton.textContent = "Reject";
    rejectButton.onclick = function () {
      rejectfriendRequest(requestID, this);
    };
    requestItem.appendChild(rejectButton);

    // append new request to the list
    incomingRequestsList.appendChild(requestItem);
  });

  // update friends list when a friend request is sent
  socket.on("update_sent_requests", function (data) {
    // add new sent request
    let receiverUsername = data.receiver_username;
    let requestID = data.request_id;

    // get the sent requests elements
    let sentRequestsList = document.getElementById("sentRequestsList");
    let sentRequestsSection = document.getElementById("sentRequestsSection");
    let noSentRequestsMessage = document.getElementById(
      "noSentRequestsMessage"
    );

    // remove noSentRequestsMessage
    if (noSentRequestsMessage) {
      noSentRequestsMessage.style.display = "none";
    }

    if (!sentRequestsList) {
      sentRequestsList = document.createElement("ul");
      sentRequestsList.id = "sentRequestsList";
      sentRequestsSection.appendChild(sentRequestsList);
    }

    let requestItem = document.createElement("li");
    requestItem.textContent = `${receiverUsername} - pending`;
    requestItem.id = "sent-request-" + requestID;

    // append new request to list
    sentRequestsList.appendChild(requestItem);
  });

  // update friends list when a friend request is actioned
  socket.on("update_sent_requests_status", function (data) {
    let requestID = data.request_id;
    let newStatus = data.new_status;

    // find request item in sent requests list, update status
    let requestItem = document.getElementById(`sent-request-${requestID}`);
    requestItem.remove();

        // check if no more sent requests
        let sentRequestsList = document.getElementById('sentRequestsList');
        let sentRequestsSection = document.getElementById('sentRequestsSection');
        let noSentRequestsMessage = document.getElementById('noSentRequestsMessage');
        
        if (sentRequestsList && sentRequestsList.children.length === 0) {
            // If there are none, display the "No sent requests" message
            if (noSentRequestsMessage) {
                noSentRequestsMessage.style.display = 'block'; // Make existing message visible
            } else {
                // Create the "No sent requests" message if it doesn't exist
                noSentRequestsMessage = document.createElement('p');
                noSentRequestsMessage.id = 'noSentRequestsMessage';
                noSentRequestsMessage.textContent = 'No sent requests. Go and add someone!';
                sentRequestsSection.appendChild(noSentRequestsMessage);
            }
        }
    });

  // function to join a room with a friend
  async function click_join(friendUsername) {
    // use friend's username to join room
    socket.emit("join", username, friendUsername, (res) => {
      if (typeof res != "number") {
        alert(res); // alert of error
        return; // escape early
      }
      room_id = res; // set room id from response
      Cookies.set("room_id", room_id); // set cookie

            // show message input box and hide chat box
        $("#chat_box").hide();
        $("#input_box").show();
        });
    }

  // function to logout
  function logout() {
    // Clear the browser session history
    window.history.pushState(null, null, window.location.href);
    window.onpopstate = function () {
      window.history.go(1);
    };

    // Redirect to the logout URL
    window.location.href = "{{ url_for('logout') }}";
  }


    function  Friends() {
        return axios.get("{{ url_for('get_friends') }}")
        .then(function(response){
            friendsList = response.data.friends;
            console.log('Updated friends list:', friendsList);
            return friendsList
        })
        .catch(function(error){
            console.error('Error:', error)
        });
    }

  function isFriend(receiver) {
    return friendsList.includes(receiver);
  }

  function chatSendFriendRequest(receiver) {
    axios
      .post("{{ url_for('add_friend') }}", {
        current_user: "{{ username }}",
        friend_user: receiver,
      })
      .then(function (response) {
        console.log("Response Data:", response.data);
        const chatRequestResponse = document.getElementById(
          "chatRequestResponse"
        );
        if (response.data.success) {
          chatRequestResponse.textContent =
            "Friend request sent to " + receiver;
        } else {
          chatRequestResponse.textContent =
            "Unexpected response: " + JSON.stringify(response.data);
        }
        chatRequestResponse.style.display = "block";

        // Set timeout to hide the message
        setTimeout(() => {
          chatRequestResponse.style.display = "none";
        }, 2500);
      })
      .catch(function (error) {
        console.error("Error during friend request:", error);
        const chatRequestResponse = document.getElementById(
          "chatRequestResponse"
        );
        if (
          error.response &&
          error.response.data &&
          error.response.data.error
        ) {
          chatRequestResponse.textContent = error.response.data.error;
        } else {
          chatRequestResponse.textContent = "An unexpected error occurred.";
        }
        chatRequestResponse.style.display = "block";

        // Set timeout to hide the message
        setTimeout(() => {
          chatRequestResponse.style.display = "none";
        }, 2500);
      });
  }
</script>
{% endblock %}
