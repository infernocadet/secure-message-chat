<!-- 
    Here you'll find the main exhibit: the chat application code. Feel free to look around!
-->
{% extends 'base.jinja' %}


{% block content %} 
   <style>
    nav {
        border-bottom: 1px solid black;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        background: #FFF;
        z-index: 2;
    }

    nav ul {
        margin: 0;
        padding: 0;
        list-style-type: none;
    }

    nav li {
        padding: 10px 20px;
    }

    #main-content {
        margin-top: 20px;
        padding: 5px;
    }

    #message_box {
        border: 1px solid black; 
        height: 400px; 
        width: 800px; 
        overflow: auto;
        padding: 2px;
        margin-top; 20px;
    }

    .text  {
        margin-top: 2px;
        margin-bottom: 2px;
    }

    #sidebar {
        position: fixed;
        right: 0;
        top: 0px;
        width: 250px;
        height: 100vh;
        overflow-y: auto;
        background-color: #dee2e6
    }

    aside {
        border-bottom: 1px solid black;
        padding: 10px;
    }

    aside h2 {
        margin-top: 0;
    }

    #friendsSection {
        margin-top: 60px;
    }

    #friendsList li {
        cursor: pointer;
        padding: 5px 10px;
        transition: background-color 0.3s, color 0.3s;
    }

    #friendsList li:hover {
        background-color: #d3d3d3;
        color: #333;
    }

    #friendsList li:active {
        background-color: #808080;
        color: #000;
    }

</style>

<nav>
    <ul>
    <li style="display:inline-block; float: left">Logged in as: {{ username }}</li>
    <li style="display:inline-block; float: right"><button onclick="logout()">Logout</button></li>
    </ul>
</nav>

<div id="sidebar">
    <!-- Friends Section -->
    <aside id="friendsSection">
        <h2>Friends</h2>
        <div id="friendsContent">
            {% if friends %}
                <ul id="friendsList">
                    {% for item in friends %}
                        <li id="friend-{{ item.username }}" onclick="click_join('{{ item.username }}')">
                            {{ item.username }}
                        </li>
                    {% endfor %}
                </ul>
            {% else %}
                <p id="lonelyMessage">It's a bit lonely in here...</p>
            {% endif %}
        </div>
    </aside>

    <!-- Incoming Requests Section -->
    <aside id="incomingRequestsSection">
        <h2>Incoming Requests</h2>
        <div id="incomingFriendsContent">
            <ul id="incomingRequestsList">
                {% for item in incoming_friends %}
                    <li id="friend-request-{{ item.id }}">
                        {{ item.sender_username }}
                        <button onclick="acceptfriendRequest('{{ item.id }}', this)">Accept</button>
                        <button onclick="rejectfriendRequest('{{ item.id }}', this)">Reject</button>
                        <p id="requestResponse" style="display:none;"></p>
                    </li>
                {% endfor %}
            </ul>
            {% if not incoming_friends %}
                <p id="noIncomingRequestsMessage">No incoming requests. (tumbleweed)</p>
            {% endif %}
        </div>
    </aside>

    <!-- Sent Requests Section -->
    <aside id="sentRequestsSection">
        <h2>Sent Requests</h2>
        <div id="sentRequestsContent">
            {% if sent_requests %}
                <ul id="sentRequestsList">
                    {% for sent in sent_requests %}
                        <li id="sent-request-{{ sent.id }}">
                            {{ sent.receiver_username }}
                        </li>
                    {% endfor %}
                </ul>
            {% else %}
                <p id="noSentRequestsMessage">No sent requests. Go and add someone!</p>
            {% endif %}    
        </div>
    </aside>
</div>

<div id="main-content">
    <h1>Messaging App </h1>

    <main>
        <!-- The messages are displayed here -->
        <section id="message_box"></section>

        <!-- These part ideally should be a form element, 
        but I wrote this code a year ago and I don't want to break anything...-->
        <section id="chat_box">
            <p class="text">Chat with: </p>
            <input id="receiver" placeholder="username">
            <!-- MDN says its bad practice to use the onclick attribute,
            but we're using it anyways coz its easy :)-->
            <button onclick="chat_button_clicked()" id="chatButton" disabled>Chat</button>
        </section>
        <p id="chatRequestResponse" style="display:none;"></p>

        <!-- The (message) input box is set to display: none initially, 
        this means the input box is "invisible" initially-->
        <section id="input_box" style="display: none" >
            <p class="text">Message: </p>
            <input id="message" placeholder="message">
            <button onclick="send()">Send</button>
            <button onclick="leave()">Leave Room</button>
        </section>
    </main>

    <!-- Friends form to add friends -->
    <h1>Add friend</h1>
    <form id="friendrequestForm">
        <label for="friendUsername">Friend's Username:</label>
        <input id="friendUsername" name ="friendUsername" type="text" required />
        <button type="submit">Add Friend</button>
    </form>
    <p id="friendRequestMessage" style="display:none;"></p>
</div>


<script src="/static/js/libs/socket.io.min.js"></script>
<script>
    let room_id = 0;
    let friendsList = [];


    // when the user presses the "Enter" key inside of the "message box", 
    // the message is sent to the server
    $("#message").on("keyup", (e) => {
        if (e.key == "Enter") {
            send();
        }
    })

    $(document).ready(() => {
        // room_id is undefined if the user hasn't joined a room
        // we early return in this case
        if (Cookies.get("room_id") == undefined) {
            return;
        }

        // the user has already joined an existing room
        // we'll display the message box, instead of the "Chat with: " box
        $("#chat_box").hide();
        $("#input_box").show();
        room_id = parseInt(Cookies.get("room_id"));
        console.log(room_id)
    })
    
    // Here's the Socket IO part of the code
    // things get a bit complicated here so brace yourselves :P
    let username = "{{ username }}";

    Cookies.set('username', username);

    // initializes the socket
    const socket = io();

    socket.on("safe-incoming", async (username, message) => {
        const { cipherText, iv, hmac } = message;
        const symKey = await getSymmetricKey(room_id);
        const hmacKey = await getHMACKey(room_id);

        if (!symKey || !hmacKey) {
            console.error("Keys are not available to decrypt or verify the message.");
            return;
        }

        if (await verifyHMAC(cipherText + iv, hmac, hmacKey)) {
            const decryptedMessage = await decryptMessage(cipherText, new Uint8Array(iv), symKey);
            add_message(`${username}: ${decryptedMessage}`, "black");
        } else {
            console.error("HMAC verification failed. Message integrity compromised.");
        }
    });

    // an incoming message arrives, we'll add the message to the message box
    socket.on("incoming", (msg, color="black") => {
        add_message(msg, color);
    })
    
    // we'll send the message to the server by emitting a "send" event
    async function send() {
        let message = $("#message").val();
        $("#message").val("");
        if (message.trim() === "") return; // Prevent sending empty messages

        const symKey = await getSymmetricKey(room_id);
        const hmacKey = await getHMACKey(room_id);

        if (!symKey || !hmacKey) {
            console.error("Keys are not available to encrypt or sign the message.");
            return;
        }

        const { cipherText, iv } = await encryptMessage(message, symKey);
        const hmac = await signMessage(cipherText + iv, hmacKey);

        socket.emit("safe-send", username, { cipherText, iv: Array.from(iv), hmac }, room_id);  
    }

    // we emit a join room event to the server to join a room
    function join_room() {
       
        let receiver = $("#receiver").val();

        socket.emit("join", username, receiver, (res) => {
            if (typeof res != "number") {
                alert(res);
                return;
            }

            room_id = res;
            Cookies.set("room_id", room_id);

            $("#chat_box").hide();
            $("#input_box").show();
        });
     
    }

    // function when the user clicks on "Leave Room"
    // emits a "leave" event, telling the server that we want to leave the room
    function leave() {
        Cookies.remove("room_id");
        socket.emit("leave", username, room_id);
        $("#input_box").hide();
        $("#chat_box").show();
    }

    // function to add a message to the message box
    // called when an incoming message has reached a client
    function add_message(message, color) {
        let box = $("#message_box");
        let child = $(`<p style="color:${color}; margin: 0px;"></p>`).text(message);
        box.append(child);
    }

    

    // adding friend function
    document.getElementById('friendrequestForm').addEventListener('submit', function(event) {
        event.preventDefault(); // prevent form from submitting the traditional way

        let friendUsername = document.getElementById('friendUsername').value;
        let currentUsername = "{{ username }}";

        // add in error handling to prevent users from adding themselves
        if (friendUsername == currentUsername) {
            document.getElementById('friendRequestMessage').textContent = "Can't add yourself!";
            document.getElementById('friendRequestMessage').style.display = 'block';
            return new Error("Error message");
        }
        
        // construct url for the post event
        let addFriendURL = "{{ url_for('add_friend') }}";

        // use axios to send post request
        axios.post(addFriendURL, {
            current_user: currentUsername,
            friend_user: friendUsername
        })
        .then(function (response) {

            console.log(response.data);
            document.getElementById('friendRequestMessage').textContent = "Friend request sent!";
            document.getElementById('friendRequestMessage').style.display = 'block';
        })
        .catch(function (error) {
            console.error('Error:', error)

            // check if error response contains data
            if (error.response && error.response.data){
                // display error message
                document.getElementById('friendRequestMessage').textContent = error.response.data.error;
            } else {
                document.getElementById('friendRequestMessage').textContent = "An error occurred while sending the friend request.";
            }
            document.getElementById('friendRequestMessage').style.display = 'block';
        });
    });

    // function to accept a friend request
    function acceptfriendRequest(requestID, element) {
        let acceptURL = "{{ url_for('accept_friend_request') }}"
        axios.post(acceptURL, {
            request_id: requestID
        })
        .then(function (response) {

            // check if response contains an error
            if (response.data.error){

                // display error
                document.getElementById('requestResponse').textContent = response.data.error;
                document.getElementById('requestResponse').style.display = 'block';

            } else {

                // on success, remove request from list
                element.closest('li').remove();

                // check if any more friend requests
                let incomingRequestsList = document.getElementById('incomingRequestsList');
                if (incomingRequestsList && incomingRequestsList.children.length === 0){
                    // if none, display no incoming requests
                    noIncomingRequestsMessage.style.display = 'block';
                }

                // success message
                console.log(response.data);
                document.getElementById('requestResponse').textContent = "You accepted the request!";
                document.getElementById('requestResponse').style.display = 'block';
            }
            
        })
        .catch(function (error){
            console.error('Error:', error)
            document.getElementById('requestResponse').textContent = error;
            document.getElementById('requestResponse').style.display = 'block';
        });
    };

    // function to reject a friend request
    function rejectfriendRequest(requestID, element) {
        let rejectURL = "{{ url_for('reject_friend_request') }}"
        axios.post(rejectURL, {
            request_id: requestID
        })
        .then(function (response) {

            // on success, remove friend request from UI
            element.closest('li').remove();

            // check if any more friend requests
            let incomingRequestsList = document.getElementById('incomingRequestsList');
            if (incomingRequestsList && incomingRequestsList.children.length === 0){
                // if none, display no incoming requests
                noIncomingRequestsMessage.style.display = 'block';
            }

            console.log(response.data);
            document.getElementById('requestResponse').textContent = "You rejected the request!";
            document.getElementById('requestResponse').style.display = 'block';

        })
        .catch(function (error){
            console.error('Error:', error)
            document.getElementById('requestResponse').textContent = "reject error";
            document.getElementById('requestResponse').style.display = 'block';
        });
    };

    // this is where update friends list was before
    // update friends list when a new friend is added
    socket.on("update_friends_list", function(data){

        // backend sends username of new friend
        let newFriendUsername = data.new_friend;

        // get all current friends list elements
        let friendsList = document.getElementById('friendsList');
        let friendsSection = document.getElementById('friendsSection');
        let lonelyMessage = document.getElementById('lonelyMessage');

        // check if friends list exists, create if not
        if (!friendsList){
            if (lonelyMessage){
                lonelyMessage.remove();
            }
            friendsList = document.createElement('ul');
            friendsList.id = 'friendsList';
            friendsSection.appendChild(friendsList)
        }

        // add friend into the list
        let newFriendItem = document.createElement('li');
        newFriendItem.textContent = newFriendUsername;
        newFriendItem.id = "friend-" + newFriendUsername;
        newFriendItem.setAttribute('onclick', `click_join('${newFriendUsername}')`); // Bind click event inline
        friendsList.appendChild(newFriendItem);
        
    });

    // update friend requests list when a friend request is received
    socket.on("update_friend_requests", function(data){

        // backend sends username of new friend
        let newFriendUsername = data.new_friend;

        // retrieve request ID of the particular friend request
        let requestID = data.request_id;

        // get all current friend request list elements
        let incomingRequestsList = document.getElementById('incomingRequestsList');
        let incomingRequestsSection = document.getElementById('incomingRequestsSection');
        let noIncomingRequestsMessage = document.getElementById("noIncomingRequestsMessage");
        
        // remove noIncomingRequests message if exists
        if (noIncomingRequestsMessage){
            noIncomingRequestsMessage.style.display = 'none';
        };

        // create incoming request list if doesnt exist
        if (!incomingRequestsList){
            incomingRequestsList = document.createElement('ul');
            incomingRequestsList.id = 'incomingRequestsList';
            incomingRequestsSection.appendChild(incomingRequestsList);
        }

        // create list item for the new friend request
        let requestItem = document.createElement('li');
        requestItem.id = "friend-request-" + requestID

        // create text node for the username
        let usernameText = document.createTextNode(newFriendUsername);
        requestItem.appendChild(usernameText);

        // create accept button
        let acceptButton = document.createElement('button');
        acceptButton.textContent = 'Accept';
        acceptButton.onclick = function() {
            acceptfriendRequest(requestID, this);
        };
        requestItem.appendChild(acceptButton);

        // create reject button
        let rejectButton = document.createElement('button');
        rejectButton.textContent = 'Reject';
        rejectButton.onclick = function() {
            rejectfriendRequest(requestID, this);
        };
        requestItem.appendChild(rejectButton);

        // append new request to the list
        incomingRequestsList.appendChild(requestItem);
    })

    // update friends list when a friend request is sent
    socket.on("update_sent_requests", function(data){
        // add new sent request
        let receiverUsername = data.receiver_username;
        let requestID = data.request_id;

        // get the sent requests elements
        let sentRequestsList = document.getElementById('sentRequestsList');
        let sentRequestsSection = document.getElementById('sentRequestsSection');
        let noSentRequestsMessage = document.getElementById('noSentRequestsMessage');

        // remove noSentRequestsMessage
        if (noSentRequestsMessage){
            noSentRequestsMessage.style.display = 'none';
        }

        if (!sentRequestsList){
            sentRequestsList = document.createElement('ul');
            sentRequestsList.id = 'sentRequestsList';
            sentRequestsSection.appendChild(sentRequestsList);
        }

        let requestItem = document.createElement('li');
        requestItem.textContent = `${receiverUsername} - pending`;
        requestItem.id = 'sent-request-' + requestID;

        // append new request to list
        sentRequestsList.appendChild(requestItem);
    });

    // update friends list when a friend request is actioned
    socket.on("update_sent_requests_status", function(data) {
        let requestID = data.request_id;
        let newStatus = data.new_status;

        // find request item in sent requests list, update status
        let requestItem = document.getElementById(`sent-request-${requestID}`);
        requestItem.remove();

        // check if no more sent requests
        let sentRequestsList = document.getElementById('sentRequestsList');
        let sentRequestsSection = document.getElementById('sentRequestsSection');
        let noSentRequestsMessage = document.getElementById('noSentRequestsMessage');
        
        if (sentRequestsList && sentRequestsList.children.length === 0) {
            // If there are none, display the "No sent requests" message
            if (noSentRequestsMessage) {
                noSentRequestsMessage.style.display = 'block'; // Make existing message visible
            } else {
                // Create the "No sent requests" message if it doesn't exist
                noSentRequestsMessage = document.createElement('p');
                noSentRequestsMessage.id = 'noSentRequestsMessage';
                noSentRequestsMessage.textContent = 'No sent requests. Go and add someone!';
                sentRequestsSection.appendChild(noSentRequestsMessage);
            }
        }
    });

    //listen for room readiness before emitting join request
    socket.on("room_ready", async function(data) {
        console.log(username + " received room_ready event");
        if (data.room_id === room_id && username === data.receiver) {

            console.log(username + "Generating symmetric key");
            const symmetricKey = await generateSymmetricKey(data.room_id);
            console.log(username + 'Symmetric key generated' + symmetricKey);

            console.log(username + 'Fetching public key from: ' + data.sender + '...');
            const publicKeyResponse = await fetchPublicKey(data.sender);
            if (!publicKeyResponse) {
                console.error('Failed to fetch public key');
                return;
            }
            const publicKeyData = base64ToArrayBuffer(publicKeyResponse);
            const publicKey = await window.crypto.subtle.importKey("spki", publicKeyData, { name: "RSA-OAEP", hash: "SHA-256" }, true, ["encrypt"]);
            const encryptedKey = await encryptSymmetricKey(symmetricKey, publicKey);

            console.log("Sending encrypted key from: " + username + " to: " + data.sender + " in room: " + data.room_id + " encrypted key: " + encryptedKey);
            socket.emit("send_encrypted_key", {room_id: data.room_id, encrypted_key: encryptedKey, sender: data.sender});
        }
    });

    socket.on("waiting", function(data) {
        console.log("Waiting for " + data.receiver + " to join the room...");
    });

    // function to join a room with a friend
    async function click_join(friendUsername) {
        // use friend's username to join room
        console.log(username + "beginning click_join");
        socket.emit("join", username, friendUsername, (res) => { 
            if (typeof res != "number") {
                alert(res); // alert of error
                return; // escape early
            }
            room_id = res; // set room id from response
            Cookies.set("room_id", room_id); // set cookie

            // show message input box and hide chat box
        $("#chat_box").hide();
        $("#input_box").show();
        });
    }

    function logout() {
        // Clear the browser session history
        window.history.pushState(null, null, window.location.href);
        window.onpopstate = function () {
            window.history.go(1);
        };

        // Redirect to the logout URL
        window.location.href = "{{ url_for('logout') }}";
    }


    document.getElementById('receiver').addEventListener('keyup', function(){
        let receiverInput = document.getElementById('receiver').value;
        let chatButton = document.getElementById('chatButton').disabled = !receiverInput.trim();
    })

    function chat_button_clicked(){
        let receiver = $("#receiver").val();
        if (!receiver) {
            alert("Please enter a username");
            return;
        }

        fetchFriends().then(() => {
            // check if receiver is already a friend
            if (isFriend(receiver)){
                join_room();
            } else {
                // if not, try adding them as a friend.
                // i should've made the previous add friend function callable, but i'm lazy
                chatSendFriendRequest(receiver);
            }
        }).catch(error => {
            console.error('Failed to catch friends:', error);
        });
    }

    function fetchFriends() {
        return axios.get("{{ url_for('get_friends') }}")
        .then(function(response){
            friendsList = response.data.friends;
            console.log('Updated friends list:', friendsList);
            return friendsList
        })
        .catch(function(error){
            console.error('Error:', error)
        });
    }

    function isFriend(receiver){
        return friendsList.includes(receiver);
    }

    function chatSendFriendRequest(receiver){
        axios.post("{{ url_for('add_friend') }}", {
            current_user: "{{ username }}",
            friend_user: receiver
        })
        .then(function(response){
            console.log("Response Data:", response.data);
            const chatRequestResponse = document.getElementById('chatRequestResponse');
            if (response.data.success) {
                chatRequestResponse.textContent = "Friend request sent to " + receiver;
            } else {
                chatRequestResponse.textContent = "Unexpected response: " + JSON.stringify(response.data);
            }
            chatRequestResponse.style.display = 'block';
            
            // Set timeout to hide the message
            setTimeout(() => {
                chatRequestResponse.style.display = 'none';
            }, 2500);
        })
        .catch(function(error){
           console.error('Error during friend request:', error);
            const chatRequestResponse = document.getElementById('chatRequestResponse');
            if (error.response && error.response.data && error.response.data.error) {
                chatRequestResponse.textContent = error.response.data.error;
            } else {
                chatRequestResponse.textContent = "An unexpected error occurred.";
            }
            chatRequestResponse.style.display = 'block';

            // Set timeout to hide the message
            setTimeout(() => {
                chatRequestResponse.style.display = 'none';
            }, 2500);
        });
    }

    // its about to get freaky !!! encryption baby

    let db;

    // Open connection to the IndexedDB
    function openDB() {
        return new Promise((resolve, reject) => {
            const request = indexedDB.open("CryptoKeys", 3);

            request.onerror = function(event) {
                console.error("Database error: " + event.target.errorCode);
                reject("Failed to open DB");
            };

            request.onsuccess = function(event) {
                db = event.target.result;
                resolve(db);
            };

            request.onupgradeneeded = function(event) {
                const db = event.target.result;
                if (!db.objectStoreNames.contains("PrivateKeyStore")) {
                    db.createObjectStore("PrivateKeyStore", { keyPath: "id" });
                }
                if (!db.objectStoreNames.contains("SymmetricKeys")) {
                db.createObjectStore("SymmetricKeys", { keyPath: "id" });
                }
                if (!db.objectStoreNames.contains("HMACKeys")) {
                db.createObjectStore("HMACKeys", { keyPath: "id" });
                }
            };
        });
    }

    // Retrieve private key for a username
    async function getPrivateKey(username) {
        console.log(username + " is attempting to get private key")

        if (!db){
            db = await openDB();
        }
         if (!db) {
            console.error("Database is not open");
            return;
        }

        return new Promise((resolve, reject) => {
            const transaction = db.transaction(["PrivateKeyStore"], "readonly");
            const store = transaction.objectStore("PrivateKeyStore");
            const request = store.get(username);

            request.onsuccess = async () => {
                if (request.result) {
                    console.log("Private key found:", username);

                    try {
                        // Import the key from the JWK format
                        const cryptoKey = await window.crypto.subtle.importKey(
                            "jwk",
                            JSON.parse(request.result.key), // Parse the stored string back into JSON
                            {
                                name: "RSA-OAEP",
                                hash: { name: "SHA-256" },
                            },
                            false, // whether the key is extractable (i.e., can be taken out of the web crypto API)
                            ["decrypt"] // this key can only be used to decrypt
                        );
                        resolve(cryptoKey);
                    } catch (error) {
                        console.error("Error importing key:", error);
                        reject(error);
                    }
                } else {
                    console.log("No private key stored for", username);
                    resolve(null);
                }
            };
            request.onerror = () => {
                console.error("Error fetching private key from IndexedDB.");
                reject("Failed to retrieve key");
            };
        });
    }

    // generate symmetric key used to ENCRYPT ALL THE MESSAGES
    async function generateSymmetricKey(room_id){
        const key = await window.crypto.subtle.generateKey(
            {
                name: "AES-GCM",
                length: 256
            },
            true,
            ["encrypt", "decrypt"]
        );

        // store key in IndexedDB
        const keyData = await window.crypto.subtle.exportKey("jwk", key);
        const db = await openDB();
        const transaction = db.transaction(["SymmetricKeys"], "readwrite");
        const store = transaction.objectStore("SymmetricKeys");
        await store.put({id: room_id, key: keyData})

        // logging key data
        const jwkString = JSON.stringify(keyData);
        console.log("[SYMMETRIC KEY GENERATED]:", jwkString);

        // now send the key off to be encrypted and broadcasted to the room
        return key;
    }

    // encrypt the symmetric key using the receiver's public key
    async function encryptSymmetricKey(key, publicKey){
        const exportedKey = await window.crypto.subtle.exportKey(
            "raw",
            key
        );
        const encryptedKey = await window.crypto.subtle.encrypt(
            {
                name: "RSA-OAEP"
            },
            publicKey,
            exportedKey
        );
        return encryptedKey;
    }

    async function fetchPublicKey(username){
        try {
            let response = await axios.get(`/get_public_key/${username}`);
            return response.data.public_key;
        } catch (error) {
            console.error('Error fetching public key:', error);
            return null;
        }
    }

    // function to decrypt the encrypted symmetric key
    async function decryptSymmetricKey(encryptedKey) {
        // get the private key
        console.log(username + " is attempting to decrypt symmetric key")
        const privateKey = await getPrivateKey(username);
        // decrypt the key
        console.log("attempting to decrypt key NOW")
        const decryptedKey = await window.crypto.subtle.decrypt(
            {
                name: "RSA-OAEP"
            },
            privateKey,
            encryptedKey
        );
        return decryptedKey;
    }

    // listen for the encrypted key
    // after decrytipn, the symmetric key is stored in the IndexedDB
    socket.on("receive_encrypted_key", async function(data) {
        const sender = data.sender;
        const room_id = data.room_id;
        
        // only the receiver should store the key
        if (sender === username) {
            // get the encrypted key
            const encryptedKey = data.encrypted_key;

            console.log("Received encrypted key:", encryptedKey);

            try {
                const symmetricKeyRAW = await decryptSymmetricKey(encryptedKey);
                console.log("Symmetric key decrypted RAW DATA:", new Uint8Array(symmetricKeyRAW));

                // reimport raw key data to cryptokey object
                const symmetricKey = await window.crypto.subtle.importKey(
                    "raw",
                    symmetricKeyRAW,
                    {
                        name: "AES-GCM",
                        length: 256
                    },
                    true,
                    ["encrypt", "decrypt"]
                );

                // convert cryptokey back to JWK for storage
                const keyData = await window.crypto.subtle.exportKey("jwk", symmetricKey);
                console.log("Re-imported symmetric key: " + keyData);

                const db = await openDB();
                const transaction = db.transaction(["SymmetricKeys"], "readwrite");
                const store = transaction.objectStore("SymmetricKeys");
                await store.put({id: room_id, key: keyData});

                console.log("Symmetric key stored in IndexedDB successfully");
                socket.emit("finally", username);
            } catch (error) {
                console.error("Failed to decrypt symmetric key:", error);
            }
        } else {
            return;
        }    
    });

    // whenever we encrypt or decrypt messages, get the symmetric key
    async function getSymmetricKey(room_id){
        const db = await openDB();
        const transaction = db.transaction(["SymmetricKeys"], "readonly");
        const store = transaction.objectStore("SymmetricKeys");
        const request = store.get(room_id);
        return new Promise((resolve, reject) => {
            request.onsuccess = () => {
                if (request.result) {
                    resolve(window.crypto.subtle.importKey(
                        "jwk",
                        request.result.key,
                        {
                            name: "AES-GCM",
                            length: 256
                        },
                        true,
                        ["encrypt", "decrypt"]
                    ));
                } else {
                    reject("No key found");
                }
            };
            request.onerror = () => {
                reject("Failed to retrieve key");
            };
        });
    }

    // Helper function to convert a base64 string to ArrayBuffer
    function base64ToArrayBuffer(base64) {
        var binary_string = window.atob(base64);
        var len = binary_string.length;
        var bytes = new Uint8Array(len);
        for (var i = 0; i < len; i++)        {
            bytes[i] = binary_string.charCodeAt(i);
        }
        return bytes.buffer;
    }

    // function to derive a HMAC key from the symmetric key
    async function deriveHMACKey(symmetricKey, salt) {
        // export key to raw format
        const keyRaw = await window.crypto.subtle.exportKey("raw", symmetricKey);

        // import raw key as a format for PBKDF2
        const baseKey = await window.crypto.subtle.importKey(
            "raw",
            keyRaw,
            { name: "PBKDF2" },
            false,
            ["deriveKey"]
        );

        // define pbkdf2 parameters
        const iterations = 50000; // Higher is more secure but more computationally expensive
        const deriveParams = {
            name: "PBKDF2",
            salt: salt,
            iterations: iterations,
            hash: "SHA-256"
        };

        // derive the HMAC key
        const hmacKey = await window.crypto.subtle.deriveKey(
            deriveParams,
            baseKey,
            { name: "HMAC", hash: {name: "SHA-256"}, length: 256 },
            true, // set to true if you need to export the HMAC key
            ["sign", "verify"]
        );

        return hmacKey;
    }


    // function set up HMACkey in Storage
    async function setupHMACKey(symmetricKey, room_id, salt) {
        try {
            const hmacKey = await deriveHMACKey(symmetricKey, salt);
            console.log("HMAC Key Derived and Ready for use.");

            // Export the HMAC key if you need to store it
            const exportedHmacKey = await window.crypto.subtle.exportKey("jwk", hmacKey);

            // Store the exported key in IndexedDB
            const db = await openDB();
            const transaction = db.transaction(["HMACKeys"], "readwrite");
            const store = transaction.objectStore("HMACKeys");
            await store.put({id: room_id, key: JSON.stringify(exportedHmacKey)}); // Store as string

            console.log("HMAC key stored in IndexedDB successfully");
        } catch (error) {
            console.error("Error deriving and storing HMAC key:", error);
        }
    }

    // function to retrieve HMACKey from storage
    async function getHMACKey(room_id) {
        const db = await openDB();
        const transaction = db.transaction(["HMACKeys"], "readonly");
        const store = transaction.objectStore("HMACKeys");
        const request = store.get(room_id);

        return new Promise((resolve, reject) => {
            request.onsuccess = async () => {
                if (request.result) {
                    try {
                        const hmacKey = await window.crypto.subtle.importKey(
                            "jwk",
                            JSON.parse(request.result.key), // Convert from string to JWK object
                            { name: "HMAC", hash: {name: "SHA-256"} },
                            true,
                            ["sign", "verify"]
                        );
                        resolve(hmacKey);
                    } catch (error) {
                        console.error("Error importing HMAC key:", error);
                        reject(error);
                    }
                } else {
                    console.log("No HMAC key stored for room", room_id);
                    reject("Key not found");
                }
            };
            request.onerror = () => {
                console.error("Error fetching HMAC key from IndexedDB.");
                reject("Failed to retrieve key");
            };
        });
    }

    // write a socket listener which listens for setupHMACKeys event, to call the setupHMACKey function (broadcasted to all users in room)
    socket.on("setupHMACKeys", async function(data) {

        const room_id = data.room_id;
        const salt = Uint8Array.from(atob(data.salt), c => c.charCodeAt(0));
        const current_username = username
        console.log(username + " from Room " + room_id + " has received setupHMACKeys event.");
        try {
            const symKey = await getSymmetricKey(room_id);
            if (!symKey) {
                console.error("Symmetric key not found. Cannot set up HMAC key.");
                return;
            }
            console.log(current_username + ": Retrieved symmetric key. Now setting up HMAC key.")
            await setupHMACKey(symKey, room_id, salt);
        } catch (error) {
            console.error("Failed to set up HMAC key", error)
        }
    });

    // function to derive key from password for encryption
    async function deriveKeyFromPassword(password, salt) {
        const encoder = new TextEncoder();
        const keyMaterial = await window.crypto.subtle.importKey(
            "raw",
            encoder.encode(password),
            { name: "PBKDF2" },
            false,
            ["deriveKey"]
        );

        return window.crypto.subtle.deriveKey(
            {
                name: "PBKDF2",
                salt: salt,
                iterations: 100000,
                hash: "SHA-256"
            },
            keyMaterial,
            { name: "AES-GCM", length: 256 },
            true,
            ["encrypt", "decrypt"]
        );
    }


    // function to encrypt messages before being sent to the server storage
    async function encryptMessage(message, key){
        const iv = window.crypto.getRandomValues(new Uint8Array(12));
        const encoder = new TextEncoder();
        const encoded = encoder.encode(message);
        const encrypted = await window.crypto.subtle.encrypt(
            {
                name: "AES-GCM",
                iv: iv
            },
            key,
            encoded
        );

        return {
            iv: Array.from(iv),
            data: btoa(String.fromCharCode(...new Uint8Array(encrypted)))
        }
    }

    // function to decrypt messages from the server storage
    async function decryptMessage(encryptedData, key){
        const iv = new Uint8Array(encryptedData.iv);
        const encrypted = Uint8Array(atob(encryptedData.data).split('').map(character => character.charCodeAt(0)));
        const decrypted = await window.crypto.subtle.decrypt(
            {
                name: "AES-GCM",
                iv: iv
            },
            key,
            encrypted
        );

        const decoder = new TextDecoder();
        return decoder.decode(decrypted);
    }

    // function to encrypt and store message to the server
    async function encryptAndStoreMessage(message, room_id, symKey) {
        const {cipherText, iv} = await encryptMessage(message, symKey);
        socket.emit("store_message", { room_id, cipherText, iv });
    }

    // function to decrypt messages retrieved from Server
    async function decryptMessageHistory(message, symKey) {
        return Promise.all(message.map(async (msg) => {
            const decryptedText = await decryptMessage(msg.encrypted_message, symKey, msg.iv);
            return { ...msg, decryptedText};
        }));
    }

    

    // function to encrypt messages using AES-GCM
    async function encryptMessage(message, symKey) {
        const encoder = new TextEncoder();
        const encodedMessage = encoder.encode(message);

        // generate a random IV for each encryption
        const iv = window.crypto.getRandomValues(new Uint8Array(12));

        const encryptedMessage = await window.crypto.subtle.encrypt(
            {
                name: "AES-GCM",
                iv: iv
            },
            symKey,
            encodedMessage
        );

        // convert arraybuffer to base64
        const cipherText = btoa(String.fromCharCode(...new Uint8Array(encryptedMessage)));

        return { cipherText, iv };
    }

    // function to decrypt messages using AES-GCM
    async function decryptMessage(cipherText, iv, symKey) {
        const decoder = new TextDecoder();
        const encryptedBuffer = Uint8Array.from(atob(cipherText), c => c.charCodeAt(0));

        const decryptedContent = await window.crypto.subtle.decrypt(
            {
                name: "AES-GCM",
                iv: iv
            },
            symKey,
            encryptedBuffer
        );

        const decryptedMessage = decoder.decode(decryptedContent);
        return decryptedMessage;
    }

    // function to sign a message using HMAC
    async function signMessage(data, hmacKey) {
        const encoder = new TextEncoder();
        const dataEncoded = encoder.encode(data);

        const hmacBuffer = await window.crypto.subtle.sign(
            "HMAC",
            hmacKey,
            dataEncoded
        );

        // convert the hmac buffer to a hex string for transmission
        return Array.from(new Uint8Array(hmacBuffer)).map(b => b.toString(16).padStart(2, '0')).join('');
    }

    // function to verify a message using HMAC
    async function verifyHMAC(data, hmac, hmacKey){
        const valid = await window.crypto.subtle.verify(
            "HMAC",
            hmacKey,
            new Uint8Array(hmac.match(/[\da-f]{2}/gi).map(h => parseInt(h, 16))),
            new TextEncoder().encode(data)
        );
        return valid;
    }

</script>
{% endblock %}
