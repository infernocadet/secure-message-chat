<!-- 
    Here you'll find the main exhibit: the chat application code. Feel free to look around!
-->
{% extends 'base.jinja' %}


{% block content %} 
   <style>
    nav {
        border-bottom: 1px solid black;
        overflow: auto
    }

    #message_box {
        border: 1px solid black; 
        height: 400px; 
        width: 800px; 
        overflow: auto;
        padding: 2px;
    }

    .text  {
        margin-top: 2px;
        margin-bottom: 2px;
    }

    #sidebar {
        position: fixed;
        right: 0;
        top: 0;
        width: 250px;
        height: 100vh;
        overflow-y: auto;
        background-color: #EEEEEE
    }

    aside {
        border-bottom: 1px solid black;
        padding: 10px;
    }

    aside h2 {
        margin-top: 0;
    }

</style>

<!--Navbar, you'll see the username here-->
<nav style="border-bottom: 1px solid black;">
    <ol style="float: right">
        <li style="display:inline-block">Username:  {{ username }} </li>
    </ol>
</nav>

<div id="sidebar">
    <!-- Friends Section -->
    <aside id="friendsSection">
        <h2>Friends</h2>
        <div id="friendsContent">
            {% if friends %}
                <ul id="friendsList">
                {% set user_friends = friends %}
                {% for item in user_friends %}
                <li id=""friend-{{ item.username }}>{{ item.username }}</li>
                {% endfor %}
                </ul>
            {% else %}
                <p id="lonelyMessage">It's a bit lonely in here...</p>
            {% endif %}
        </div>
    </aside>

    <!-- Incoming Requests Section -->
    <aside id="incomingRequestsSection">
        <h2>Incoming Requests</h2>
        <div id="incomingFriendsContent">
            {% if incoming_friends %}
                <ul>
                    {% set incoming_list = incoming_friends %}
                    {% for item in incoming_list %}
                        <li id=""friend-request-{{ item.id }}>
                            {{ item.sender_username }}
                            <button onclick="acceptfriendRequest('{{ item.id }}', this)">Accept</button>
                            <button onclick="rejectfriendRequest('{{ item.id }}', this)">Reject</button>
                            <p id="requestResponse" style="display:none;"></p>
                        </li>
                    {% endfor %}
                </ul>
            {% else %}
                <p>No incoming requests.</p>
            {% endif %}
        </div>
    </aside>

    <!-- Sent Requests Section -->
    <aside id="sentRequestsSection">
        <h2>Sent Requests</h2>
        <div id="sentRequestsContent">
            {% if sent_requests %}
                <ul>
                    {% set sent_list = sent_requests %}
                    {% for sent in sent_list %}
                        <li>
                            {{ sent.receiver_username }}
                        </li>
                    {% endfor %}
                </ul>
            {% else %}
                <p>No sent requests. Go and add someone!</p>
            {% endif %}    
        </div>
    </aside>

</div>

<!-- old design -->

{# <aside id="friends_list">
    <h2>Friends</h2> 
    {% if friends %}
        <ul id="friendsList">
            {% set user_friends = friends %}
            {% for item in user_friends %}
            <li id=""friend-{{ item.username }}>{{ item.username }}</li>
            {% endfor %}
        </ul>
    {% else %}
        <p id="lonelyMessage">It's a bit lonely in here...</p>
    {% endif %}
    <h2>Incoming Requests</h2>
    {% if incoming_friends %}
        <ul>
            {% set incoming_list = incoming_friends %}
            {% for item in incoming_list %}
                <li id=""friend-request-{{ item.id }}>
                    {{ item.sender_username }}
                    <button onclick="acceptfriendRequest('{{ item.id }}', this)">Accept</button>
                    <button onclick="rejectfriendRequest('{{ item.id }}', this)">Reject</button>
                    <p id="requestResponse" style="display:none;"></p>
                </li>
            {% endfor %}
        </ul>
    {% else %}
        <p>No incoming requests.</p>
    {% endif %}
    <h2>Sent Requests</h2>
    {% if sent_requests %}
        <ul>
            {% set sent_list = sent_requests %}
            {% for sent in sent_list %}
                <li>
                    {{ sent.receiver_username }}
                </li>
            {% endfor %}
        </ul>
    {% else %}
        <p>No sent requests. Go and add someone!</p>
    {% endif %}
</aside> #}



<h1>Messaging App </h1>

<main>
    <!-- The messages are displayed here -->
    <section id="message_box"></section>

    <!-- These part ideally should be a form element, 
    but I wrote this code a year ago and I don't want to break anything...-->
    <section id="chat_box">
        <p class="text">Chat with: </p>
        <input id="receiver" placeholder="username">
        <!-- MDN says its bad practice to use the onclick attribute,
        but we're using it anyways coz its easy :)-->
        <button onclick="join_room()">Chat</button>
    </section>

    <!-- The (message) input box is set to display: none initially, 
    this means the input box is "invisible" initially-->
    <section id="input_box" style="display: none" >
        <p class="text">Message: </p>
        <input id="message" placeholder="message">
        <button onclick="send()">Send</button>
        <button onclick="leave()">Leave Room</button>
    </section>
</main>

<!-- Friends form to add friends -->
<h1>Add friend</h1>
<form id="friendrequestForm">
    <label for="friendUsername">Friend's Username:</label>
    <input id="friendUsername" name ="friendUsername" type="text" required />
    <button type="submit">Add Friend</button>
</form>
<p id="friendRequestMessage" style="display:none;"></p>

<script src="/static/js/libs/socket.io.min.js"></script>
<script>
    let room_id = 0;

    // when the user presses the "Enter" key inside of the "message box", 
    // the message is sent to the server
    $("#message").on("keyup", (e) => {
        if (e.key == "Enter") {
            send();
        }
    })

    // when the user presses the enter key inside of the "receiver box"
    // the user joins a (socket) room
     $("#receiver").on("keyup", (e) => {
        if (e.key == "Enter") {
            join_room();
        }
    })


    $(document).ready(() => {
        // room_id is undefined if the user hasn't joined a room
        // we early return in this case
        if (Cookies.get("room_id") == undefined) {
            return;
        }

        // the user has already joined an existing room
        // we'll display the message box, instead of the "Chat with: " box
        $("#chat_box").hide();
        $("#input_box").show();
        room_id = parseInt(Cookies.get("room_id"));
    })
    
    // Here's the Socket IO part of the code
    // things get a bit complicated here so brace yourselves :P
    let username = "{{ username }}";

    Cookies.set('username', username);

    // initializes the socket
    const socket = io();

    // an incoming message arrives, we'll add the message to the message box
    socket.on("incoming", (msg, color="black") => {
        add_message(msg, color);
    })
    
    // we'll send the message to the server by emitting a "send" event
    function send() {
        let message = $("#message").val();
        $("#message").val("");
        socket.emit("send", username, message, room_id);  
    } 

    // we emit a join room event to the server to join a room
    function join_room() {
       
        let receiver = $("#receiver").val();

        // pass in the receiver of our message to the server
        // as well as the current user's username
        socket.emit("join", username, receiver, (res) => {
            // res is a string with the error message if the error occurs
            // this is a pretty bad way of doing error handling, but watevs
            if (typeof res != "number") {
                alert(res);
                return;
            }

            // set the room id variable to the room id returned by the server
            room_id = res;
            Cookies.set("room_id", room_id);

            // now we'll show the input box, so the user can input their message
            $("#chat_box").hide();
            $("#input_box").show();
        });
     
    }

    // function when the user clicks on "Leave Room"
    // emits a "leave" event, telling the server that we want to leave the room
    function leave() {
        Cookies.remove("room_id");
        socket.emit("leave", username, room_id);
        $("#input_box").hide();
        $("#chat_box").show();
    }

    // function to add a message to the message box
    // called when an incoming message has reached a client
    function add_message(message, color) {
        let box = $("#message_box");
        let child = $(`<p style="color:${color}; margin: 0px;"></p>`).text(message);
        box.append(child);
    }

    // adding friend function
    document.getElementById('friendrequestForm').addEventListener('submit', function(event) {
        event.preventDefault(); // prevent form from submitting the traditional way

        let friendUsername = document.getElementById('friendUsername').value;
        let currentUsername = "{{ username }}";

        // add in error handling to prevent users from adding themselves
        if (friendUsername == currentUsername) {
            document.getElementById('friendRequestMessage').textContent = "Can't add yourself buddy";
            document.getElementById('friendRequestMessage').style.display = 'block';
            return new Error("Error message");
        }
        
        // construct url for the post event
        let addFriendURL = "{{ url_for('add_friend') }}";

        // use axios to send post request
        axios.post(addFriendURL, {
            current_user: currentUsername,
            friend_user: friendUsername
        })
        .then(function (response) {
            console.log(response.data);
            document.getElementById('friendRequestMessage').textContent = "Friend request sent!";
            document.getElementById('friendRequestMessage').style.display = 'block';
        })
        .catch(function (error) {
            console.error('Error:', error)
            document.getElementById('friendRequestMessage').textContent = "Failed to send friend request :(";
            document.getElementById('friendRequestMessage').style.display = 'block';
        });
    });

    function acceptfriendRequest(requestID, element) {
        let acceptURL = "{{ url_for('accept_friend_request') }}"
        axios.post(acceptURL, {
            request_id: requestID
        })
        .then(function (response) {

            // on success, remove the friend request from the UI
            element.closest('li').remove();

            // backend sends username of new friend
            let newFriendUsername = response.data.newFriendUsername;

            // get all the current friends list elements
            let friendsList = document.getElementById('friendsList');
            let friendsSection = document.getElementById('friendsSection');
            let lonelyMessage = document.getElementById('lonelyMessage');

            if (!friendsList){
                // user had no friends

                // remove lonely message
                if (lonelyMessage) {
                    lonelyMessage.remove();
                }
                
                // create new friends list
                let ul = document.createElement('ul');
                ul.id = 'friendsList';
                friendsSection.appendChild(ul);
                friendsList = ul;
            }

            // append friend to friends list
            let newFriendItem = document.createElement('li');
            newFriendItem.textContent = newFriendUsername;
            newFriendItem.id = "friend-" + newFriendUsername;
            friendsList.appendChild(newFriendItem);

            // success message
            console.log(response.data);
            document.getElementById('requestResponse').textContent = "You accepted the request!";
            document.getElementById('requestResponse').style.display = 'block';
        })
        .catch(function (error){
            console.error('Error:', error)
            document.getElementById('requestResponse').textContent = error;
            document.getElementById('requestResponse').style.display = 'block';
        });
        
    };

    function rejectfriendRequest(requestID, element) {
        let rejectURL = "{{ url_for('reject_friend_request') }}"
        axios.post(rejectURL, {
            request_id: requestID
        })
        .then(function (response) {

            // on success, remove friend request from UI
            element.closest('li').remove();

            console.log(response.data);
            document.getElementById('requestResponse').textContent = "You rejected the request!";
            document.getElementById('requestResponse').style.display = 'block';

        })
        .catch(function (error){
            console.error('Error:', error)
            document.getElementById('requestResponse').textContent = "reject error";
            document.getElementById('requestResponse').style.display = 'block';
        });
    };
    
    
</script>
{% endblock %}
