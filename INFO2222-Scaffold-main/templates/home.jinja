<!-- 
    Here you'll find the main exhibit: the chat application code. Feel free to look around!
-->
{% extends 'base.jinja' %}


{% block content %} 
   <style>
    nav {
        border-bottom: 1px solid black;
        overflow: auto
    }

    #message_box {
        border: 1px solid black; 
        height: 400px; 
        width: 800px; 
        overflow: auto;
        padding: 2px;
    }

    .text  {
        margin-top: 2px;
        margin-bottom: 2px;
    }

    #sidebar {
        position: fixed;
        right: 0;
        top: 0;
        width: 250px;
        height: 100vh;
        overflow-y: auto;
        background-color: #EEEEEE
    }

    aside {
        border-bottom: 1px solid black;
        padding: 10px;
    }

    aside h2 {
        margin-top: 0;
    }

    #friendsList li {
        cursor: pointer;
        padding: 5px 10px;
        transition: background-color 0.3s, color 0.3s;
    }

    #friendsList li:hover {
        background-color: #d3d3d3;
        color: #333;
    }

    #friendsList li:active {
        background-color: #808080;
        color: #000;
    }

</style>

<!--Navbar, you'll see the username here-->
<nav style="border-bottom: 1px solid black;">
    <ol style="float: right">
        <li style="display:inline-block">Username:  {{ username }} </li>
    </ol>
</nav>

<div id="sidebar">
    <!-- Friends Section -->
    <aside id="friendsSection">
        <h2>Friends</h2>
        <div id="friendsContent">
            {% if friends %}
                <ul id="friendsList">
                    {% for item in friends %}
                        <li id="friend-{{ item.username }}" onclick="click_join('{{ item.username }}')">
                            {{ item.username }}
                        </li>
                    {% endfor %}
                </ul>
            {% else %}
                <p id="lonelyMessage">It's a bit lonely in here...</p>
            {% endif %}
        </div>
    </aside>

    <!-- Incoming Requests Section -->
    <aside id="incomingRequestsSection">
        <h2>Incoming Requests</h2>
        <div id="incomingFriendsContent">
            <ul id="incomingRequestsList">
                {% for item in incoming_friends %}
                    <li id="friend-request-{{ item.id }}">
                        {{ item.sender_username }}
                        <button onclick="acceptfriendRequest('{{ item.id }}', this)">Accept</button>
                        <button onclick="rejectfriendRequest('{{ item.id }}', this)">Reject</button>
                        <p id="requestResponse" style="display:none;"></p>
                    </li>
                {% endfor %}
            </ul>
            {% if not incoming_friends %}
                <p id="noIncomingRequestsMessage">No incoming requests. (tumbleweed)</p>
            {% endif %}
        </div>
    </aside>

    <!-- Sent Requests Section -->
    <aside id="sentRequestsSection">
        <h2>Sent Requests</h2>
        <div id="sentRequestsContent">
            {% if sent_requests %}
                <ul id="sentRequestsList">
                    {% for sent in sent_requests %}
                        <li id="sent-request-{{ sent.id }}">
                            {{ sent.receiver_username }}
                        </li>
                    {% endfor %}
                </ul>
            {% else %}
                <p id="noSentRequestsMessage">No sent requests. Go and add someone!</p>
            {% endif %}    
        </div>
    </aside>

</div>


<h1>Messaging App </h1>

<main>
    <!-- The messages are displayed here -->
    <section id="message_box"></section>

    <!-- These part ideally should be a form element, 
    but I wrote this code a year ago and I don't want to break anything...-->
    <section id="chat_box">
        <p class="text">Chat with: </p>
        <input id="receiver" placeholder="username">
        <!-- MDN says its bad practice to use the onclick attribute,
        but we're using it anyways coz its easy :)-->
        <button onclick="join_room()">Chat</button>
    </section>

    <!-- The (message) input box is set to display: none initially, 
    this means the input box is "invisible" initially-->
    <section id="input_box" style="display: none" >
        <p class="text">Message: </p>
        <input id="message" placeholder="message">
        <button onclick="send()">Send</button>
        <button onclick="leave()">Leave Room</button>
    </section>
</main>

<!-- Friends form to add friends -->
<h1>Add friend</h1>
<form id="friendrequestForm">
    <label for="friendUsername">Friend's Username:</label>
    <input id="friendUsername" name ="friendUsername" type="text" required />
    <button type="submit">Add Friend</button>
</form>
<p id="friendRequestMessage" style="display:none;"></p>

<script src="/static/js/libs/socket.io.min.js"></script>
<script>
    let room_id = 0;

    // when the user presses the "Enter" key inside of the "message box", 
    // the message is sent to the server
    $("#message").on("keyup", (e) => {
        if (e.key == "Enter") {
            send();
        }
    })

    // when the user presses the enter key inside of the "receiver box"
    // the user joins a (socket) room
     $("#receiver").on("keyup", (e) => {
        if (e.key == "Enter") {
            join_room();
        }
    })


    $(document).ready(() => {
        // room_id is undefined if the user hasn't joined a room
        // we early return in this case
        if (Cookies.get("room_id") == undefined) {
            return;
        }

        // the user has already joined an existing room
        // we'll display the message box, instead of the "Chat with: " box
        $("#chat_box").hide();
        $("#input_box").show();
        room_id = parseInt(Cookies.get("room_id"));
    })
    
    // Here's the Socket IO part of the code
    // things get a bit complicated here so brace yourselves :P
    let username = "{{ username }}";

    Cookies.set('username', username);

    // initializes the socket
    const socket = io();

    // an incoming message arrives, we'll add the message to the message box
    socket.on("incoming", (msg, color="black") => {
        add_message(msg, color);
    })
    
    // we'll send the message to the server by emitting a "send" event
    function send() {
        let message = $("#message").val();
        $("#message").val("");
        socket.emit("send", username, message, room_id);  
    } 

    // we emit a join room event to the server to join a room
    function join_room() {
       
        let receiver = $("#receiver").val();

        // pass in the receiver of our message to the server
        // as well as the current user's username
        socket.emit("join", username, receiver, (res) => {
            // res is a string with the error message if the error occurs
            // this is a pretty bad way of doing error handling, but watevs
            if (typeof res != "number") {
                alert(res);
                return;
            }

            // set the room id variable to the room id returned by the server
            room_id = res;
            Cookies.set("room_id", room_id);

            // now we'll show the input box, so the user can input their message
            $("#chat_box").hide();
            $("#input_box").show();
        });
     
    }

    // function when the user clicks on "Leave Room"
    // emits a "leave" event, telling the server that we want to leave the room
    function leave() {
        Cookies.remove("room_id");
        socket.emit("leave", username, room_id);
        $("#input_box").hide();
        $("#chat_box").show();
    }

    // function to add a message to the message box
    // called when an incoming message has reached a client
    function add_message(message, color) {
        let box = $("#message_box");
        let child = $(`<p style="color:${color}; margin: 0px;"></p>`).text(message);
        box.append(child);
    }

    // adding friend function
    document.getElementById('friendrequestForm').addEventListener('submit', function(event) {
        event.preventDefault(); // prevent form from submitting the traditional way

        let friendUsername = document.getElementById('friendUsername').value;
        let currentUsername = "{{ username }}";

        console.log("Friend: ", friendUsername); 
        console.log("Current: ", currentUsername);

        // add in error handling to prevent users from adding themselves
        if (friendUsername == currentUsername) {
            document.getElementById('friendRequestMessage').textContent = "Can't add yourself!";
            document.getElementById('friendRequestMessage').style.display = 'block';
            return new Error("Error message");
        }
        
        // construct url for the post event
        let addFriendURL = "{{ url_for('add_friend') }}";

        console.log("sending axios post thingo")
        // use axios to send post request
        axios.post(addFriendURL, {
            current_user: currentUsername,
            friend_user: friendUsername
        })
        .then(function (response) {

            console.log(response.data);
            document.getElementById('friendRequestMessage').textContent = "Friend request sent!";
            document.getElementById('friendRequestMessage').style.display = 'block';
        })
        .catch(function (error) {
            console.error('Error:', error)

            // check if error response contains data
            if (error.response && error.response.data){
                // display error message
                document.getElementById('friendRequestMessage').textContent = error.response.data.error;
            } else {
                document.getElementById('friendRequestMessage').textContent = "An error occurred while sending the friend request.";
            }
            document.getElementById('friendRequestMessage').style.display = 'block';
        });
    });

    // function to accept a friend request
    function acceptfriendRequest(requestID, element) {
        let acceptURL = "{{ url_for('accept_friend_request') }}"
        axios.post(acceptURL, {
            request_id: requestID
        })
        .then(function (response) {

            // check if response contains an error
            if (response.data.error){

                // display error
                document.getElementById('requestResponse').textContent = response.data.error;
                document.getElementById('requestResponse').style.display = 'block';

            } else {

                // on success, remove request from list
                element.closest('li').remove();

                // check if any more friend requests
                let incomingRequestsList = document.getElementById('incomingRequestsList');
                if (incomingRequestsList && incomingRequestsList.children.length === 0){
                    // if none, display no incoming requests
                    noIncomingRequestsMessage.style.display = 'block';
                }

                // success message
                console.log(response.data);
                document.getElementById('requestResponse').textContent = "You accepted the request!";
                document.getElementById('requestResponse').style.display = 'block';
            }
            
        })
        .catch(function (error){
            console.error('Error:', error)
            document.getElementById('requestResponse').textContent = error;
            document.getElementById('requestResponse').style.display = 'block';
        });
    };

    // function to reject a friend request
    function rejectfriendRequest(requestID, element) {
        let rejectURL = "{{ url_for('reject_friend_request') }}"
        axios.post(rejectURL, {
            request_id: requestID
        })
        .then(function (response) {

            // on success, remove friend request from UI
            element.closest('li').remove();

            // check if any more friend requests
            let incomingRequestsList = document.getElementById('incomingRequestsList');
            if (incomingRequestsList && incomingRequestsList.children.length === 0){
                // if none, display no incoming requests
                noIncomingRequestsMessage.style.display = 'block';
            }

            console.log(response.data);
            document.getElementById('requestResponse').textContent = "You rejected the request!";
            document.getElementById('requestResponse').style.display = 'block';

        })
        .catch(function (error){
            console.error('Error:', error)
            document.getElementById('requestResponse').textContent = "reject error";
            document.getElementById('requestResponse').style.display = 'block';
        });
    };
    
    // update friends list when a new friend is added
    socket.on("update_friends_list", function(data){

        // backend sends username of new friend
        let newFriendUsername = data.new_friend;

        // get all current friends list elements
        let friendsList = document.getElementById('friendsList');
        let friendsSection = document.getElementById('friendsSection');
        let lonelyMessage = document.getElementById('lonelyMessage');

        // check if friends list exists, create if not
        if (!friendsList){
            if (lonelyMessage){
                lonelyMessage.remove();
            }
            friendsList = document.createElement('ul');
            friendsList.id = 'friendsList';
            friendsSection.appendChild(friendsList)
        }

        // add friend into the list
        let newFriendItem = document.createElement('li');
        newFriendItem.textContent = newFriendUsername;
        newFriendItem.id = "friend-" + newFriendUsername;
        friendsList.appendChild(newFriendItem);
        
    });

    // update friend requests list when a friend request is received
    socket.on("update_friend_requests", function(data){

        // backend sends username of new friend
        let newFriendUsername = data.new_friend;

        // retrieve request ID of the particular friend request
        let requestID = data.request_id;

        // get all current friend request list elements
        let incomingRequestsList = document.getElementById('incomingRequestsList');
        let incomingRequestsSection = document.getElementById('incomingRequestsSection');
        let noIncomingRequestsMessage = document.getElementById("noIncomingRequestsMessage");
        
        // remove noIncomingRequests message if exists
        if (noIncomingRequestsMessage){
            noIncomingRequestsMessage.style.display = 'none';
        };

        // create incoming request list if doesnt exist
        if (!incomingRequestsList){
            incomingRequestsList = document.createElement('ul');
            incomingRequestsList.id = 'incomingRequestsList';
            incomingRequestsSection.appendChild(incomingRequestsList);
        }

        // create list item for the new friend request
        let requestItem = document.createElement('li');
        requestItem.id = "friend-request-" + requestID

        // create text node for the username
        let usernameText = document.createTextNode(newFriendUsername);
        requestItem.appendChild(usernameText);

        // create accept button
        let acceptButton = document.createElement('button');
        acceptButton.textContent = 'Accept';
        acceptButton.onclick = function() {
            acceptfriendRequest(requestID, this);
        };
        requestItem.appendChild(acceptButton);

        // create reject button
        let rejectButton = document.createElement('button');
        rejectButton.textContent = 'Reject';
        rejectButton.onclick = function() {
            rejectfriendRequest(requestID, this);
        };
        requestItem.appendChild(rejectButton);

        // append new request to the list
        incomingRequestsList.appendChild(requestItem);
    })

    // update friends list when a friend request is sent
    socket.on("update_sent_requests", function(data){
        // add new sent request
        let receiverUsername = data.receiver_username;
        let requestID = data.request_id;

        // get the sent requests elements
        let sentRequestsList = document.getElementById('sentRequestsList');
        let sentRequestsSection = document.getElementById('sentRequestsSection');
        let noSentRequestsMessage = document.getElementById('noSentRequestsMessage');

        // remove noSentRequestsMessage
        if (noSentRequestsMessage){
            noSentRequestsMessage.style.display = 'none';
        }

        if (!sentRequestsList){
            sentRequestsList = document.createElement('ul');
            sentRequestsList.id = 'sentRequestsList';
            sentRequestsSection.appendChild(sentRequestsList);
        }

        let requestItem = document.createElement('li');
        requestItem.textContent = `${receiverUsername} - pending`;
        requestItem.id = 'sent-request-' + requestID;

        // append new request to list
        sentRequestsList.appendChild(requestItem);
    });

    // update friends list when a friend request is actioned
    socket.on("update_sent_requests_status", function(data) {
        let requestID = data.request_id;
        let newStatus = data.new_status;

        // find request item in sent requests list, update status
        let requestItem = document.getElementById(`sent-request-${requestID}`);
        requestItem.remove();

        // check if no more sent requests
        let sentRequestsList = document.getElementById('sentRequestsList');
        let sentRequestsSection = document.getElementById('sentRequestsSection');
        let noSentRequestsMessage = document.getElementById('noSentRequestsMessage');
        
        if (sentRequestsList && sentRequestsList.children.length === 0) {
            // If there are none, display the "No sent requests" message
            if (noSentRequestsMessage) {
                noSentRequestsMessage.style.display = 'block'; // Make existing message visible
            } else {
                // Create the "No sent requests" message if it doesn't exist
                noSentRequestsMessage = document.createElement('p');
                noSentRequestsMessage.id = 'noSentRequestsMessage';
                noSentRequestsMessage.textContent = 'No sent requests. Go and add someone!';
                sentRequestsSection.appendChild(noSentRequestsMessage);
            }
        }
    });

    // function to join a room with a friend
    function click_join(friendUsername) {
        // use friend's username to join room
        socket.emit("join", username, friendUsername, (res) => {
            if (typeof res != "number") {
                alert(res); // alert of error
                return; // escape early
            }

            room_id = res; // set room id from response
            Cookies.set("room_id", room_id); // set cookie

            // show message input box and hide chat box
            $("#chat_box").hide();
            $("#input_box").show();
        });
    }
    
</script>
{% endblock %}
